{"_id":6629,"body":"<p><br></p><p style=\"text-align: justify;\"><img class=\"fr-dib fr-draggable aligncenter\" src=\"http://img.spiderum.com/sp-images/e4120010e2e211e6b0972b84f1651fc5.jpg\"></p><p style=\"text-align: justify;\">(Contents below)</p><p style=\"text-align: justify;\">Sau khi du hành qua không biết bao nhiêu ngôn ngữ lập trình (Java, C++, Python, JavaScript...) cuối cùng mình đã chọn JavaScript.</p><p style=\"text-align: justify;\"><span style=\"background-color: initial;\">Từ một dân không chuyên về công thông tin, mình bắt đầu dấn thân vào nghề này như là một thử thách lớn với bản thân. Thực sự mình không thích với những gì mình học trên trường đại học mình đang chọn bây giờ. Bắt đầu với Javascript cũng thực sự là khó khăn vì không biết bao nhiêu người đã khuyên mình nên chọn 1 ngôn ngữ bài bản, nền tảng để theo đuổi như Java, C/C++. Họ nói JavaScript rất \"tà đạo\", học dễ mất gốc :O nhưng hình như mình không có hứng thú với những ngôn ngữ ấy lắm thì phải.</span></p><p style=\"text-align: justify;\"><span style=\"background-color: initial;\">Một lý do nữa là vì JavaScript bây giờ làm được gần như mọi thứ: lập trình web cả ở phía client-side với sever-side; &nbsp;làm game với unity3d; hay ứng dụng di động với React Native, NativeScript... Nhận thấy tương lai cực kì sáng lạng của JavaScipt, học 1 ngôn ngữ mà làm được đủ trò nên mình càng có động lực hơn.&nbsp;</span></p><p style=\"text-align: justify;\">Việc viết cũng là 1 kĩ năng quan trọng, giúp mình tự trau dồi bản thân, tự củng cố kiến thức rất tốt (Và còn có thể biết lỗi sai mình mắc phải nữa chứ). Hi vọng những người mới học lập trình như mình có thể theo dõi, có thể có được một nguồn tham khảo về những mặt hay ho của JavaScript. Cũng rất mong nhận được sự góp ý nhiệt tình của những bạn đọc có kinh nghiệm. Vì mình mới chỉ bước chân vào nghề nên khó có thể tránh được sai sót.<br><br>Vì series này mình chỉ đề cập đến những kiến thức nền tảng JavaScript và có cách tiếp cận hơi khác với các tài liệu các bạn đọc hay các nguồn khác (Mình học qua 1 khóa Javascript trên Udemy: Javascript Understanding the Weird Parts. Kiến thức mình viết lại chủ yếu theo ý hiểu của mình trong khóa học này. Các bạn có thể tham khảo thêm các tài liệu hay như JavaScript The Definitive Guide, 6th edition - O' Reilly hay JavaScript : The Good Parts - O' Reilly.</p><p style=\"text-align: justify;\"><span style=\"background-color: initial;\">Note: Có một số từ tiếng anh mình không muốn dịch sang tiếng Việt vì mình nghĩ dịch sang tiếng Việt nghe sẽ rất kì hoặc không được đầy đủ nghĩa nên xin phép được chêm 1 vài từ tiếng anh ạ. (Mình xin được viết nghiêng).</span><em><br>Ok. Let's Get Started&nbsp;</em>=))</p><p><strong>CHÀO MỪNG CÁC BẠN ĐẾN VỚI #NHẬT KÍ HỌC JAVASCRIPT&nbsp;</strong></p><h3>Syntax parsers, Execution contexts, Lexical environments.</h3><p style=\"text-align: justify;\">Vì sao những thứ này là quan trọng? Mình thấy việc đi ngay vào học ngôn ngữ chưa thực sự là một cách hay để bạn đi sâu vào ngôn ngữ ấy. Để có những kiến thức nền tảng, những ý tưởng căn bản về JavaScript cho những người chưa từng được tiếp xúc với lập trình thì không thể bỏ qua những lý thuyết căn bản. Vì những vấn đề này sẽ được lặp đi lặp lại trong quá trình học và làm việc với Javascript, nên chúng ta cần hiểu rõ chúng hoạt động như thế nào.</p><h4>Syntax parser</h4><p style=\"text-align: justify;\"><u><em><strong>Syntax parser</strong></em></u> đơn giản có thể hiểu là một chương trình có thể đọc và hiểu được code của mình nếu như chương trình được viết ra đúng về mặt cú pháp.</p><blockquote><p style=\"text-align: justify;\"><em>Syntax parsers is the part of the compiler that really understands the syntax of the language</em></p></blockquote><p style=\"text-align: justify;\">Những dòng code của bạn không phải ma thuật, có ai đó đã viết chương trình dịch chúng cho máy tính của bạn có thể hiểu. C<span style=\"background-color: initial;\">ụ thể hơn thì ở đây là bộ biên dịch sẽ đọc từng dòng code của bạn (character by character), nếu&nbsp;</span><em style=\"background-color: initial;\">the syntax is valid</em><span style=\"background-color: initial;\">&nbsp;chúng sẽ được thực thi theo cách mà máy tính có thể hiểu&nbsp;</span></p><p style=\"text-align: justify;\"><span style=\"background-color: initial;\">Ví dụ với đoạn code sau:&nbsp;</span></p><p><img class=\"fr-dib fr-draggable\" src=\"http://img.spiderum.com/sp-images/3e6e5740e2dc11e6b3f19b1a71caae80.jpg\"></p><p><img src alt class=\"fr-draggable\"></p><p style=\"text-align: justify;\">Khi bạn chạy những dòng code này sẽ có 1 chương trình covert những gì bạn viết thành những chỉ lệnh (<em>computer instructions</em> : kết quả của quá trình thông dịch thành ngôn ngữ máy). Các hàm và biến sẽ được miêu tả lại chính xác trên bộ nhớ thành ngôn ngữ máy mà các thiết bị phần cứng có thể hiểu được.</p><p><img class=\"fr-dib fr-draggable\" src=\"http://img.spiderum.com/sp-images/29a41340e2dc11e6b0972b84f1651fc5.jpg\"></p><p><img src alt class=\"fr-draggable aligncenter\"></p><p style=\"text-align: justify;\"><em><strong>Hãy nhớ</strong></em>: Mỗi khi chạy những dòng code của bạn, luôn có những chương trình đang âm thầm trợ giúp cho bạn tương tác với computer dễ dàng hơn!</p><h4>Lexical Environment</h4><p style=\"text-align: justify;\">Theo như mình hiểu đơn giản: <em>lexical</em> là những gì thuộc về từ vựng. <em>Lexical environment</em> (môi trường từ vựng?) là nơi mà hiện hữu những chứa đựng cụ thể, những thứ tồn tại <em>physically &nbsp;</em>trong những dòng code mà bạn viết.</p><p style=\"text-align: justify;\">Vẫn với ví dụ ở trên chúng ta thêm 1 biến <em>a</em> chẳng hạn:</p><p><img class=\"fr-dib fr-draggable aligncenter\" src=\"http://img.spiderum.com/sp-images/d090a2b0e2d511e6b0972b84f1651fc5.jpg\"></p><p style=\"text-align: justify;\">Như vậy ta có thể thấy biến a tồn tại <em>laxically/physically &nbsp;</em>bên trong <em>function&nbsp;</em>greet().&nbsp;</p><p style=\"text-align: justify;\">Chúng ta đã biết chương trình được viết ra không được chuyển trực tiếp mà được thông dịch thành ngôn ngữ máy tính có thể hiểu được. Vì vậy <em>laxical environment&nbsp;</em>là khá quan trọng trong việc khi chúng ta nhìn thấy những gì được viết ra; chúng sẽ đưa ra một cái nhìn chính xác về những gì chúng thực sự được đặt trong bộ nhớ máy tính (<em>memory)&nbsp;</em> hay những gì chúng trực tiếp ảnh hưởng đến nhau (<em>interacted)&nbsp;</em>(giữa các biến, các hàm trong chương trình...). Dựa vào <em>lexical environment&nbsp;</em>mà <em>syntax parsers</em> sẽ ra quyết định xem chương trình sẽ được thực hiện như thế nào trên phần cứng máy tính.</p><h4>Execution context</h4><p>Phần này mình không biết diễn tả sang tiếng Việt như thế nào vì khi mình viết ra theo ý hiểu của mình nó thực sự rất ngang :/ Nhưng hi vọng ở những bài viết sau khi mình đi sâu và nhắc nhiều đến nó các bạn sẽ thực sự hiểu nó là gì. Chỉ còn 1 điều cần lưu ý là: NÓ RẤT QUAN TRỌNG!!!</p><p style=\"text-align: justify;\">Có thể hiểu đơn giản execution context là 1 miền xác định được tạo ra giúp quản lý các phần code đang được thực thi.</p><p style=\"text-align: justify;\">Ví dụ như khi đoạn code này được thực thi&nbsp;</p><p><img class=\"fr-dib fr-draggable aligncenter\" src=\"http://img.spiderum.com/sp-images/d090a2b0e2d511e6b0972b84f1651fc5.jpg\"></p><p style=\"text-align: justify;\">nó sẽ tạo 1 execution context ngay bên trong hàm greet() giúp quản lý hết phần code được đặt bên trong hàm&nbsp;</p><p style=\"text-align: justify;\"><strong style=\"background-color: initial;\">Bạn thắc mắc những cái trên đây là cái khỉ gì vậy? Nhưng tin mình đi. Nó thực sự rất quan trọng! Bạn sẽ thấy ngay sau khi bắt đầu viết những chương trình JavaScript đầu tiên của mình! !<==</strong></p><p style=\"text-align: justify;\">Trên đây là những điều cơ bản tổng quan nhất khi mình bắt đầu học về JavaScript như 1 ngôn ngữ đầu tiên của mình. Một bài viết ngắn chỉ mang tính bắt đầu. Và cũng vì đây là lần đầu tiên mình viết 1 bài viết về chia sẻ kiến thức, một dạng nhật kí viết lại những gì đã học được nên khó có thể tránh được sai sót, văn cảnh còn lủng củng. Mong các bạn đọc có thể góp ý giúp mình để mình có thể có thêm những động lực để tiếp tục viết những bài viết chất lượng hơn.<br>Xin cám ơn :D</p><p style=\"text-align: justify;\"><br></p><h2 style=\"text-align: justify;\">CONTENTS:</h2><h4 style=\"text-align: justify;\">I. Execution contexts & Lexical Environments:</h4><p><a href=\"http://spiderum.com/bai-dang/1-Nhat-ki-hoc-JavaScript-Syntax-parsers-Execution-contexts-Lexical-environments-545\" target=\"_blank\">1. Syntax parsers, Execution contexts, Lexical environments</a></p><p><a href=\"http://spiderum.com/bai-dang/2-Nhat-ki-hoc-JavaScript-Objects-The-global-environment-The-Creation-and-Hoisting-549\" target=\"_blank\">2. Objects, The global environment, The Creation Phase and Hoisting</a></p><p>===========================================================</p><p><a href=\"http://spiderum.com/bai-dang/2-Nhat-ki-hoc-JavaScript-Objects-The-global-environment-The-Creation-and-Hoisting-549\" target=\"_blank\">NEXT-></a></p><p style=\"text-align: justify;\"><br></p>","cat_id":{"_id":12,"name":"Khoa học - Công nghệ"},"created_at":"2017-01-25T08:55:27.331Z","creator_id":2496,"down_point":0,"tags":null,"title":"#1 Nhật kí học JavaScript: Syntax parsers, Execution contexts, Lexical environments.","up_point":29}