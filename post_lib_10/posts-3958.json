{"_id":10813,"title":"Học lập trình trong 21 ngày hay mười năm","body":"<div><div class=\"scrape-url\" contenteditable=\"false\"><a class=\"scrape-info\" href=\"http://diendan.congdongcviet.com/threads/t1430::hoc-lap-trinh-trong-bao-lau-21-ngay-hay-10-nam.cpp\" rel=\"nofollow\" target=\"_blank\"><strong class=\"markup-strong\">Học lập trình trong bao lâu? 21 ngày hay 10 năm?</strong><br><em class=\"markup-em\">HỌC LẬP TRÌNH TRONG 21 NGÀY HAY 10 NĂM ? \n \nKhông ai trong chúng ta bắt đầu học từ hư không, chúng ta đứng trên vai của những người khổng lồ như Wirth, Knuth và hàng ngàn người khác. Sau đó chính bờ vai của chúng ta sẽ góp phần xây dựng tương lai. \n \n \nTại sao mọi người lại học một cách hối hả như vậy? \n \nĐến bất kì một nhà sách nào, bạn cũng có thể tìm thấy những quyển sách hướng dẫn đại loại như \"Tự học Java trong 7 ngày\", và vô số những quyển chỉ cách tự học Visual Basic, Window, Internet…</em>diendan.congdongcviet.com</a><a class=\"scrape-thumb\" target=\"_blank\" rel=\"nofollow\" href=\"http://diendan.congdongcviet.com/threads/t1430::hoc-lap-trinh-trong-bao-lau-21-ngay-hay-10-nam.cpp\" style=\"background-image: url(https://s3-ap-southeast-1.amazonaws.com/img.spiderum.com/sp-images/null)\"></a></div></div><div>Xin phép share cho các thím ở đây<br></div><div><br></div><div><br></div><div>HỌC LẬP TRÌNH TRONG 21 NGÀY HAY 10 NĂM ?</div><div><figure class=\"aligncenter\"><img src=\"https://s3-ap-southeast-1.amazonaws.com/img.spiderum.com/sp-images/6193cc50ddb311e7adfda3bc97b6afc3.jpg\" class=\"fr-fic fr-dib\"><figcaption class=\"image-description\" contenteditable=\"false\" placeholder=\"Chú thích ảnh (không bắt buộc)\"><br></figcaption></figure></div><div><br></div><div>Không ai trong chúng ta bắt đầu học từ hư không, chúng ta đứng trên vai &nbsp;của những người khổng lồ như Wirth, Knuth và hàng ngàn người khác. Sau &nbsp;đó chính bờ vai của chúng ta sẽ góp phần xây dựng tương lai.</div><div><br></div><div><br></div><div>Tại sao mọi người lại học một cách hối hả như vậy?</div><div><br></div><div>Đến bất kì một nhà sách nào, bạn cũng có thể tìm thấy những quyển sách &nbsp;hướng dẫn đại loại như \"Tự học Java trong 7 ngày\", và vô số những quyển &nbsp;chỉ cách tự học Visual Basic, Window, Internet… trong một vài ngày hoặc &nbsp;vài giờ. Tôi đã vào website <a href=\"Amazon.com\" target=\"_blank\">Amazon.com</a> để tìm kiếm các sách có chủ đề &nbsp;\"Teach youself\" và nhận được 248 tiêu đề sách, 78 quyển đầu là sách về &nbsp;máy tính (quyển thứ 79 là \"Learn Bengali in 30 days\"). Tôi thay thế từ &nbsp;\"days\" bằng từ \"hours\" và cũng nhận được một con số tương tự: 253 quyển &nbsp;với 77 quyển đầu nói về máy tính (quyển thứ 78 có tựa đề \"Teach Yourself &nbsp;Grammar and Style in 24 Hours\").</div><div><br></div><div>Như vậy có thể đi đến kết luận rằng: người ta đang học về máy tính một &nbsp;cách hấp tấp, hoặc tin học là một môn khoa học dễ dàng nhất trên thế &nbsp;giới này. Thật ra, không có quyển sách nào trên thế giới có thể dạy &nbsp;người ta học nhạc Beethoven, Vật lý Lượng tử,… trong một vài ngày hoặc &nbsp;vài giờ.</div><div><br></div><div>Chúng ta hãy phân tích xem tựa đề \"Learn Pascal in Three Days\" có nghĩa gì:</div><div><br></div><div>Learn: trong ba ngày, bạn không thể có đủ thời gian để viết một vài &nbsp;chương trình có ý nghĩa và học những bài học kinh nghiệm từ những chương &nbsp;trình đó. Bạn càng không có đủ thời gian để hiểu được ngôn ngữ Pascal &nbsp;là như thế nào. Bạn cũng không có thời gian để học hỏi từ những lập &nbsp;trình viên có kinh nghiệm. Trong một thời gian ngắn ngủi như vậy, bạn &nbsp;không thể học được nhiều. Do đó, quyển sách chỉ có thể đề cập tới những &nbsp;vấn đề nông cạn. Mà như Alexander Pope(1) đã nói: \"Học hành nông cạn &nbsp;thực sự là một điều nguy hiểm\".</div><div><br></div><div>Pascal: trong ba ngày, bạn có thể học về cú pháp của ngôn ngữ Pascal &nbsp;(nếu như bạn đã biết một ngôn ngữ khác tương tự), nhưng không thể học &nbsp;được nhiều về cách dùng cú pháp ấy. Trong một thời gian ngắn, nếu là một &nbsp;người biết lập trình Basic, bạn có thể viết một chương trình theo phong &nbsp;cách Basic bằng ngôn ngữ Pascal, thế nhưng bạn không thể biết được ngôn &nbsp;ngữ Pascal hay (hoặc dở) ở chỗ nào. Một người nổi tiếng là Alan &nbsp;Perlis(2) đã nói: \"Một ngôn ngữ không ảnh hưởng tới cách suy nghĩ của &nbsp;bạn về lập trình là một ngôn ngữ không đáng để học\". Bạn có thể nghĩ &nbsp;rằng không cần học nhiều về ngôn ngữ Pascal (hoặc về Visual Basic, hay &nbsp;javascript) bởi vì bạn chỉ cần một công cụ để hoàn thành một công việc &nbsp;nào đó. Nhưng đó là một cách nghĩ sai lầm, nếu không học về cách lập &nbsp;trình thì làm sao bạn có thể hoàn thành công việc.</div><div><br></div><div>In Three Days: thật không may, 3 ngày không thể đủ để học bất kì ngôn ngữ nào, phần viết sau đây sẽ chứng minh cho bạn điều đó.</div><div><br></div><div>Tự học lập trình trong 10 năm.</div><div><br></div><div>Các nhà nghiên cứu đã xác định rằng một người mất khoảng mười năm để &nbsp;thành thạo một lĩnh vực nào đó, từ chơi cờ, soạn nhạc, hội họa, chơi đàn &nbsp;dương cầm, bơi lội cho đến nghiên cứu vật lý lượng tử.</div><div>Và thực tế là không có một con đường tắt nào: ngay cả Mozart, người được &nbsp;coi là thần đồng âm nhạc vào năm lên 4, vậy mà phải mất 13 năm rèn &nbsp;luyện mới được công diễn trên thế giới. Samuel Johnson(3) còn cho rằng &nbsp;10 năm là chưa đủ, ông đã nói: \"Thành công trong bất kì lĩnh vực nào chỉ &nbsp;có thể đạt được bằng sự lao động của cả một đời người; và không thể nào &nbsp;có một cái giá thấp hơn\".</div><div>Đây là nguyên tắc để thành công trong việc lập trình của tôi:</div><div><br></div><div>Yêu thích việc lập trình, và học lập trình trong sự hứng thú. Và phải &nbsp;chắc rằng sự yêu thích đó đáng để cho bạn bỏ ra 10 năm theo đuổi. Trao &nbsp;đổi với các lập trình viên khác, đọc các chương trình của người khác. &nbsp;Điều này quan trọng hơn bất kì quyển sách hay khóa học nào.</div><div><br></div><div>Tự viết chương trình. Cách học tốt nhất là học bằng thực hành. Nhớ rằng &nbsp;bạn phải viết các chương trình một cách cẩn thận. Quyển sách \"Cognition &nbsp;in Practice: Mind, Mathematics, and Culture in Everyday Life\" là một &nbsp;quyển sách hay để tham khảo về các qui tắc trong việc lập trình.</div><div><br></div><div>Nếu muốn, bạn có thể bỏ ra 4 năm để học đại học. Việc này tạo cơ hội cho &nbsp;bạn làm một số việc trước khi tốt nghiệp, và sẽ cho bạn một sự hiểu &nbsp;biết sâu hơn về lĩnh vực mình quan tâm. Nếu bạn là người không thích &nbsp;trường học, bạn có thể học hỏi từ công việc thực tế những bài học tương &nbsp;tự. Nhưng trong bất kì trường hợp nào, việc chỉ học từ sách vở cũng &nbsp;không thể nào là đầy đủ. Như Eric Raymond, tác giả của quyển \"The New &nbsp;Hacker''s Dictionary\" đã nói: \"Sự giáo dục về Khoa học Máy tính không &nbsp;thể đào tạo ra những lập trình viên xuất sắc cũng như việc học về bút vẽ &nbsp;và màu tô không thể nào tạo ra một họa sĩ có tài\".</div><div><br></div><div>Khi bạn làm việc trong một dự án với các lập trình viên khác, bạn có thể &nbsp;thấy rằng: một người có thể rất giỏi trong dự án này, nhưng sẽ rất dở &nbsp;trong một dự án khác. Khi bạn là người giỏi nhất, bạn hãy thử khả năng &nbsp;của mình trong vai trò lãnh đạo dự án, và cố gắng truyền cảm hứng của &nbsp;bạn cho các thành viên khác. Khi bạn là người dở nhất, hãy cố gắng học &nbsp;hỏi từ những việc mà lãnh đạo của bạn làm và không làm.</div><div><br></div><div>Khi bạn đang thua kém các lập trình viên khác. Hãy dồn hết tâm trí của &nbsp;bạn để hiểu các chương trình của họ. Xem xét các chương trình đó dùng để &nbsp;làm gì và thử sửa lỗi các chương trình đó khi mà họ không có mặt ở đó. &nbsp;Kế tiếp, hãy nghĩ cách giải quyết vấn đề tốt hơn nếu có thể.</div><div><br></div><div>Bạn nên học ít nhất 6 ngôn ngữ lập trình. Trong đó có một ngôn ngữ hỗ &nbsp;trợ lớp trừu tượng (như Java hay C++), một ngôn ngữ theo quan điểm hàm &nbsp;(như Lisp hay ML), một ngôn ngữ khai báo (như Prolog), một ngôn ngữ hỗ &nbsp;trợ xử lý tuần tự (như Icon hay Scheme), và một ngôn ngữ hỗ trợ xử lý &nbsp;song song (như Sisal).</div><div><br></div><div>Cố gắng học một ngôn ngữ chính quy, có thể là ANSI C++, và hoàn tất việc học ngôn ngữ này càng nhanh càng tốt.</div><div><br></div><div>Luôn nhớ rằng, trong từ \"Khoa học Máy tính\" đã hàm chứa \"Máy tính\". Bạn &nbsp;phải biết rõ thời gian máy tính thực thi các lệnh, lấy thông tin từ bộ &nbsp;nhớ và đọc dữ liệu từ đĩa. Nghĩa là bạn cũng phải có hiểu biết cơ bản về &nbsp;phần cứng máy tính và cách thức làm việc của chúng.</div><div><br></div><div>Tổng kết</div><div>Tôi tin rằng, kinh nghiệm thực tế sẽ luôn đưa ra những điều bổ ích hơn &nbsp;so với hàng ngàn trang sách viết bởi những chuyên gia. Và bây giờ, bạn &nbsp;có thể đi mua một quyển sách về Java, bạn sẽ thu được một số điều hữu &nbsp;dụng từ quyển sách đó. Thế nhưng, bạn không thể thay đổi cuộc đời của &nbsp;mình hay nói cách khác là bạn không thể trở thành một lập trình viên &nbsp;chuyên nghiệp chỉ trong 24 giờ, 24 ngày, hay 24 tháng. Tôi tin chắc như &nbsp;thế.</div><div><br></div><div>Theo Peter Norvig, Hữu Xuân lược dịch.</div><div><br></div><div>(1) Alexander Pope (1688-1744): ông được xem như là nhà phê bình văn học tân cổ điển nổi tiếng ở Anh.</div><div><br></div><div>(2) Alan Perlis (1922-1990): trưởng khoa đầu tiên của khoa Khoa học Máy &nbsp;tính, Đại học Carnegie. Chủ tịch đầu tiên của ACM. Người đầu tiên đoạt &nbsp;giải thưởng Turing.</div><div><br></div><div>(3) Samuel Johnson (1709 - ?): một trong những họa sĩ người Anh nổi tiếng ở thế kỷ 18.</div><div><br></div><div>PHƯƠNG PHÁP HỌC LẬP TRÌNH HIỆU QUẢ Các ngôn ngữ lập trình ra đời và lỗi &nbsp;thời nhanh một cách đáng kinh ngạc trong ngành Khoa học Máy tính. Các &nbsp;ngôn ngữ lập trình mới thường chứa đựng những quy tắc khác nhau làm cho &nbsp;mọi người phải thường xuyên thay đổi cách dùng các công cụ cũng như thói &nbsp;quen lập trình. Nhưng việc học một ngôn ngữ lập trình mới để cung cấp &nbsp;thêm kiến thức cho nghề nghiệp của mình cũng là một nhu cầu chính đáng.</div><div><br></div><div><br></div><div>Trước khi học một ngôn ngữ mới, bạn thường đặt ra câu hỏi: Làm sao để &nbsp;học ngôn ngữ lập trình này được hiệu quả? Có một vài gợi ý nhỏ sau có &nbsp;thể giúp bạn học các ngôn ngữ lập trình dễ dàng hơn:</div><div><br></div><div>1. Nắm vững các kiểu dữ liệu cơ bản mà ngôn ngữ lập trình cung cấp.</div><div><br></div><div>Hầu hết các ngôn ngữ đều cung cấp kiểu số nguyên integer. Bạn phải tìm &nbsp;hiểu thêm thế nào là long integer hoặc short integer? Thế nào là kiểu &nbsp;liệt kê (Enumerated)? Thế nào là kiểu kí tự (Character)? Thế nào là kiểu &nbsp;chuỗi (String)? Ngôn ngữ có hỗ trợ kiểu số thực dấu chấm động hay &nbsp;không, và tầm giá trị của mỗi kiểu dữ liệu là bao nhiêu? Và khi một ngôn &nbsp;ngữ nào đó không hỗ trợ kiểu dữ liệu mà bạn cần dùng thì tốt hơn bạn &nbsp;nên chuyển sang dùng một ngôn ngữ khác.</div><div><br></div><div>2. Nắm vững cấu trúc dữ liệu cơ bản được ngôn ngữ cung cấp.</div><div><br></div><div>Chẳng hạn Pascal có cấu trúc mảng (array), Lisp có thể thao tác rất dễ &nbsp;dàng với cấu trúc danh sách (list), còn Java thì có thể làm việc với các &nbsp;lớp và các giao tiếp.…Và những vấn đề bạn nghĩ trong đầu cuối cùng phải &nbsp;được biểu diễn bằng các kiểu dữ liệu mà ngôn ngữ cung cấp, việc hiểu rõ &nbsp;mối quan hệ giữa chúng là nền tảng để giải quyết các vấn đề.</div><div><br></div><div>3. Ngôn ngữ cung cấp những toán tử dựng sẵn nào?</div><div><br></div><div>Ví dụ: Prolog xem tìm kiếm là một thao tác cơ bản, Snobol xem thao tác &nbsp;đối sánh mẫu trên các chuỗi (string pattern matching) là một toán tử cơ &nbsp;sở, các ngôn ngữ hàm (ML, Haskell) cho phép bạn tạo ra một giá trị mới &nbsp;nhưng không làm thay đổi cấu trúc hiện tại, APL cung cấp toán tử ma &nbsp;trận, … Danh sách các toán tử dựng sẵn của một ngôn ngữ sẽ cho ta biết &nbsp;những vấn đề mà những chuyên gia thiết kế ngôn ngữ đó cho là quan trọng &nbsp;nhất.</div><div><br></div><div>4. Nắm vững loại vấn đề mà ngôn ngữ có thể trợ giúp giải quyết.</div><div><br></div><div>Các ngôn ngữ thường được phát triển vì một lý do nào đó, thường là để &nbsp;giải quyết một loại vấn đề mang tính đặc trưng. Do đó, bạn nên cố gắng &nbsp;nắm rõ những chức năng đặc trưng của ngôn ngữ để giải quyết vấn đề đồng &nbsp;thời cũng nên tìm hiểu tại sao cùng một vấn đề nhưng dùng ngôn ngữ này &nbsp;để giải quyết lại dễ dàng hơn dùng ngôn ngữ khác.</div><div><br></div><div>5. Tìm hiểu những thư viện có sẵn trong ngôn ngữ.</div><div><br></div><div>Các ngôn ngữ thường có các thư viện do nhiều người đã phát triển để giải &nbsp;quyết những vấn đề khác nhau, bạn có thể sử dụng lại để giải quyết một &nbsp;vấn đề mới. Smalltalk có một thư viện đồ sộ với lượng mã luôn sẵn sàng &nbsp;để người lập trình sử dụng. C++ với thư viện chuẩn STL chứa nhiều cấu &nbsp;trúc dữ liệu thường dùng. Java có các thư viện cung cấp các tác vụ về &nbsp;mạng. Bạn hãy cố gắng tìm và sẽ thấy những gì cần thiết sẵn có.</div><div><br></div><div>6. Hãy học hỏi, mô phỏng lại!</div><div><br></div><div>Bắt đầu với việc mô phỏng lại các chương trình hiện có. Phải làm cho &nbsp;chúng có thể hoạt động trên hệ thống của bạn, bởi vì hệ thống mà nó được &nbsp;phát triển có thể không giống với hệ thống của bạn, và khi bạn có thể &nbsp;làm cho nó hoạt động tốt trên hệ thống của mình thì tức là bạn đã hiểu &nbsp;rõ về nó. Học các chương trình để hình dung được các tính năng khác nhau &nbsp;của ngôn ngữ.</div><div><br></div><div>7. Hãy thử nghiệm và rút ra kết luận!</div><div><br></div><div>Khi bạn đã có một vài chương trình có thể chạy tốt, bạn thử nghiệm bằng &nbsp;cách tạo ra một vài thay đổi. Bạn có thể lấy ra một chương trình và sửa &nbsp;lại nó để giải quyết một vấn đề sai khác chút ít so với chương trình ban &nbsp;đầu hay không? Bạn có thể lấy ra một phần nhỏ của chương trình và diễn &nbsp;đạt lại bằng cách khác hay không?</div><div><br></div><div>8. Hiện thực lại các vấn đề đã hiểu rõ bằng một ngôn ngữ mới.</div><div><br></div><div>Lấy một vài chương trình đã được viết trong một ngôn ngữ rồi cố gắng &nbsp;viết lại chúng trong ngôn ngữ mới. Không nên dịch từng câu lệnh sang &nbsp;ngôn ngữ mới mà hãy xem xét những tính năng đặc trưng nào của ngôn ngữ &nbsp;mới có thể dùng để giải quyết vấn đề. Cẩn thận xem xét những vấn đề nào &nbsp;dễ dàng hiện thực trong ngôn ngữ mới và những vấn đề nào khó khăn hơn. &nbsp;(Chương trình truyền thống đầu tiên nên viết là chương trình in ra chuỗi &nbsp;\"hello world\").</div><div><br></div><div>9. Khi gặp một vấn đề mới thì nên nghĩ về những vấn đề đã biết trước đó &nbsp;có cùng đặc điểm với vấn đề mới. Sau đó hãy bắt đầu thử nghiệm.</div><div>Tin học cho người mới bắt đầu</div><div>Chương trình đầu tiên cần phải học chính là hệ điều hành.</div><div>Nếu đang sử dụng Windows thì học Windows, Linux thì học Linux...</div><div>Hiện nay hầu hết các hệ điều hành đều có giao diện trực quan GUI, cho nên việc học để sử dụng nó đã trở nên rất dễ dàng.</div><div>Tuy nhiên, khi học bạn cũng nên quan tâm đến những điều cốt lõi cần phải nắm bắt đó là :</div><div>-thế nào là một tập tin, thư mục, ổ đĩa - hiểu được rõ ràng chính là bạn &nbsp;đã hiểu được cách hệ điều hành tổ chức dữ liệu như thế nào rồi;</div><div>-làm thế nào để thực hiện các thao tác copy, cắt, dán- đó là các thao tác cơ bản khi bạn thao tác với dữ liệu.</div><div>- Sử dụng được các chương trình đi kèm theo với hệ điều hành. Hiện nay &nbsp;thì hệ điều hành nào cũng \"khuyến mãi\" các chương trinh như soạn thảo &nbsp;văn bản (WordPad, VI), vẽ, máy tính bỏ túi, trình duyệt Web.</div><div><br></div><div><br></div><div>Chương trình thứ hai là chương trình phục vụ cho nhu cầu sử dụng của bạn.</div><div><br></div><div>Các chương trình quan trọng nhất mà mình đề ngị các bạn nên Master cách &nbsp;sử dụng là Nescape, IE, OE...YM,IRC...Các khái niệm cần nắm bắt là thế &nbsp;nào là một trang Web, địa chỉ trang Web. Làm sao để tìm kiếm một trang &nbsp;Web mà mình cần. Trang Web mà mình thích nhất là <a href=\"www.google.com\" target=\"_blank\">www.google.com</a></div><div><br></div><div>Nếu bạn thường xuyên phải xử lý văn bản thì học cách sử dụng các chương trình Office, Lotus, StarOffice...</div><div><br></div><div>Nếu bạn muốn là lập trình viên thì nên học cách sử dụng các chương trình hỗ trợ lập trình.</div><div><br></div><div>Hiện nay, theo mình các phần mềm đều được thiết kế trực quan, rất dễ sử &nbsp;dụng. Cho nên, dưới góc độ user, mình nghĩ chỉ cần xài nhiều thì biết &nbsp;nhiều, hư nhiều thì cài lại nhiều, càng biết nhiều.</div><div><br></div><div>Chương trình thứ ba, thứ tư,...cũng là chương trình phục vụ cho nhu cầu sử dụng của bạn</div><div>Các câu hỏi thường gặp</div><div>Tôi vừa tốt nghiệp đại học ngành công nghệ thông tin, những bài tập lập &nbsp;trình trong chương trình học đối với tôi không quá khó để hoàn thành, &nbsp;nhưng tôi vẫn e rằng, những khả năng của mình vẫn còn khá \"amateur\" để &nbsp;tồn tại trong một môi trường làm việc chuyên nghiệp.</div><div><br></div><div>Tôi vẫn còn 5 hay 6 tháng trước khi có một cuộc phỏng vấn với một công &nbsp;ty hàng đầu về tin học, ai đó có thể cho tôi biết những kỹ năng nào cần &nbsp;hoàn thiện trước khi phải đối mặt với những qui luật khắt khe trong công &nbsp;việc?</div><div><br></div><div>...chân thành cảm ơn.</div><div><br></div><div><br></div><div>Trả lời của một người thuê lập trình viên :</div><div><br></div><div>Trên quan điểm của một người thuê lập trình viên, tôi khuyên bạn nên &nbsp;mang tới buổi phỏng vấn một vài chương trình bạn đã từng viết. Chúng sẽ &nbsp;phần nào phản ánh được khả năng hoàn thành các phần việc được giao đồng &nbsp;thời thể hiện được những hiểu biết về lý thuyết chẳng hạn như: mô hình &nbsp;phát triển 3 tầng (3 - tier), các kỹ thuật lập trình hướng đối tượng …</div><div><br></div><div>Trả lời của một lập trình viên :</div><div><br></div><div>Đây là một vấn đề trăn trở từ khi tôi còn là một tân lập trình viên như bạn.</div><div>Ngoài việc học các kỹ năng về công nghệ, một kỹ năng vô giá nhưng ít &nbsp;được nói tới là cách trở thành một người lĩnh hội nhanh. Đây là một vấn &nbsp;đề không thuộc về phạm trù kỹ thuật, là kỹ năng cơ bản nhưng lại thiếu ở &nbsp;nhiều người. Ngày nay, các công ty hầu như không đưa ra các khóa tu &nbsp;nghiệp đầy đủ nữa, thay vì vậy lại muốn bạn có được khả năng đào sâu &nbsp;những vấn đề quan trọng. Nói thẳng ra, họ không giúp bạn được nhiều. Vì &nbsp;vậy, tôi xin giới thiệu một vài kinh nghiệm rút ra được trong quá trình &nbsp;làm việc và học tập:</div><div>1. Trước tiên, phải tìm hiểu hệ thống mạng của công ty để biết được tài &nbsp;nguyên có sẵn mà cụ thể hơn là mã chương trình. Từ nguồn mã này, bạn có &nbsp;thể biết được cách làm việc của mọi người trong công ty. Lưu giữ cho &nbsp;riêng mình các đoạn mã chẳng hạn như các template có thể sẽ giúp đỡ bạn &nbsp;rất nhiều trong việc nắm bắt các khúc mắc gặp phải.</div><div>2. Dành thời gian để nghiên cứu về cách thức hoạt động và lý do vì sao &nbsp;lại hoạt động như vậy của các đoạn mã mà những người trong công ty viết &nbsp;ra để nắm bắt được vấn đề một cách sâu sắc. Điều này cũng giúp bạn có &nbsp;được khả năng \"cảm giác\" những công việc sẽ phải thực hiện.</div><div>3. Không ngừng rèn luyện kỹ năng gõ phím của mình. Khả năng cảm giác vị trí phím nhanh có thể giúp bạn tăng năng suất công việc.</div><div>4. Rèn luyện khả năng đọc và nắm bắt vấn đề nhanh. Rõ ràng, đây là một &nbsp;vấn đề không phải dễ gặm. Thử ghé thăm các trang web phục vụ học tập đặc &nbsp;biệt là các trang về rèn luyện kỹ năng trí tuệ, chẳng hạn như &nbsp;brain.com. Trên các trang này sẽ có nhiều sản phẩm phục vụ việc phát &nbsp;triển nhanh chóng các kỹ năng về trí tuệ.</div><div><br></div><div>Những gợi ý trên bao gồm nhiều kỹ năng cơ bản mà bạn phải tốn thời gian &nbsp;để có được, nhưng những lợi ích đem lại chắc sẽ làm bạn ngạc nhiên, vậy &nbsp;hãy bắt đầu ngay bây giờ.</div><div><br></div><div>Kiến thức nền tảng là quan trọng để đưa bạn tới cánh cửa của công việc. &nbsp;Tuy nhiên, bạn sẽ sớm nhận thấy rằng hầu hết các công ty đều quan tâm &nbsp;nhiều tới khả năng nắm bắt được cách thức làm việc của họ. Nói cách khác &nbsp;là họ quan tâm đến khả năng thích nghi với công việc cũng như các công &nbsp;nghệ mới hơn là kiến thức mà bạn mang theo trong người. Tóm lại, họ muốn &nbsp;tìm người có thể giúp họ thành công và khi gặp một ai đó có khả năng &nbsp;lĩnh hội tốt, họ sẽ bị thuyết phục ngay.</div><div><br></div><div>Trả lời của một lập trình viên :</div><div><br></div><div>Đừng quá lo lắng về những kỹ năng mà bạn có. Bạn đã là một người lập &nbsp;trình tốt trong thời gian theo học đại học, vì vậy chỉ cần có sự tự tin &nbsp;thì bạn sẽ hoàn thành tốt mọi thứ trong một môi trường chuyên nghiệp. Họ &nbsp;cũng sẽ sử dụng những kỹ năng mà bạn đã biết. Không có gì mới mẻ hay bí &nbsp;mật cả, họ chỉ muốn biết cách bạn hoàn thành đúng công việc. Không có &nbsp;ai có thể nắm bắt mà không cần kinh nghiệm, vì vậy trong thời gian trước &nbsp;khi phỏng vấn, bạn nên thực hiện một vài dự án để có thể đổi mới một &nbsp;vài quan điểm nhằm mang lại một ít kinh nghiệm trong công việc.</div><div><br></div><div>Trả lời của giám đốc công ty Reliable Software:</div><div><br></div><div>Tôi hy vọng sẽ giúp bạn với các thói quen lập trình tốt mà tôi đã đúc &nbsp;kết được qua nhiều dự án đã làm ở Microsoft cũng như ở công ty tôi - &nbsp;Reliable Software:</div><div><br></div><div>1. Bắt đầu với thiết kế tốt. Thường xuyên cập nhật tài liệu thiết kế. &nbsp;Tạo thêm các tài liệu thiết kế trước khi thêm vào những đặc điểm hay &nbsp;tính năng mới.</div><div>2. Chương trình đang phát triển phải luôn luôn thể hiện được chức năng &nbsp;của nó. Quá trình phát triển là quá trình thêm các tính năng mới mà &nbsp;không phá vỡ các chức năng đã tồn tại.</div><div>3. Công việc phải được chia thành các bước nhỏ. Trong đó, việc viết code &nbsp;cho mỗi bước có khả năng hoàn thành trong một ngày làm việc. Mỗi phạm &nbsp;vi công việc lớn hơn cũng nên phân chia và làm từng bước.</div><div>4. Mỗi một dòng lệnh cần phải được xem xét và chỉnh sửa liên tục. Mỗi &nbsp;nhóm lập trình nhỏ nhất là 2 người để có thể trao đổi và xem xét code &nbsp;lẫn nhau. Vì vậy bạn hãy tập làm việc theo nhóm.</div><div><br></div><div>5. Luôn cố gắng làm việc theo phong cách top-down:</div><div>+ Phân tích: bắt đầu với những đối tượng cấp trên cùng.</div><div>+ Hiện thực: tạo đối tượng cấp trên sử dụng các stub (chỉ có interface mà không hiện thực).</div><div>+ Chỉnh sửa: thay đổi các đối tượng ở cấp độ cao trước. Nếu cần sử dụng các stub hoặc các hàm cũ.</div><div>NÊN BẮT ĐẦU TỪ C HAY C++ ?</div><div><br></div><div>Hiện nay trên thế giới có hàng trăm ngôn ngữ lập trình, có hàng chục &nbsp;ngôn ngữ phổ biến, mỗi một quý lại có thêm vài ngôn ngữ mới ra đời - gần &nbsp;đây nhất là C# với môi trường .NET Framework. Tuy nhiên, C và C++ vẫn &nbsp;là các ngôn ngữ của học sinh, sinh viên, những người bắt đầu bước vào &nbsp;nghề lập trình. Những vấn đề mà tôi đề cập ở đây được trích lược từ &nbsp;những sách lập trình C++ như: Tự học lập trình trong 21 ngày (Teach &nbsp;Yourself In 21 Days), Bắt đầu phân tích và thiết kế hướng đối tượng với &nbsp;C++ (Beginning Object - Oriented Analysis and Design with C++) …</div><div><br></div><div>Hy vọng những gì tôi trình bày ở đây đem lại hứng thú cho rộng rãi giới &nbsp;lập trình viên C++ chứ không chỉ dành cho những người mới bắt đầu. Những &nbsp;gì tôi muốn là cung cấp cho các bạn nội dung cơ bản và những khó khăn &nbsp;của ngôn ngữ.</div><div>Bây giờ, chúng ta bắt đầu xem xét C++ như là một ngôn ngữ lập trình &nbsp;hướng đối tượng. Một câu hỏi mà đa số các người muốn học lập trình C++ &nbsp;là: \"Tôi có nên học C trước khi học C++ hay không?Liệu chúng ta có thể &nbsp;xem C++ là C kèm với các lớp hoặc C++ là phiên bản hướng đối tượng của C &nbsp;hay không?\". Câu hỏi này giúp tôi nhận ra rằng cần phải tìm sự khác &nbsp;nhau giữa hai ngôn ngữ này.</div><div><br></div><div>Về cú pháp, tập hợp lệnh của C++ là một tập rộng hơn của C. Điều này có &nbsp;nghĩa là việc biên dịch một chương trình C bởi trình biên dịch C++ vẫn &nbsp;tốt đẹp nhưng ngược lại thì không.</div><div><br></div><div>Về ngữ nghĩa, giữa hai ngôn ngữ này có sự khác biệt rất lớn. Ngữ nghĩa &nbsp;của một ngôn ngữ bảo cho bạn biết ngôn ngữ được sử dụng như thế nào, bạn &nbsp;phải mô tả những gì cho ý tưởng của bạn bằng ngôn ngữ. Về phương diện &nbsp;này, có một bước nhảy khá xa giữa C++ và C. Có thể minh họa sự khác biệt &nbsp;về vấn đề cú pháp và ngữ nghĩa của C++ và C như sau:</div><div><br></div><div>Giả sử bạn là một nhà khoa học người Anh vào năm 1600. Bạn nhận được hai &nbsp;quyển sách khoa học. Một quyển được viết tại Việt Nam vào năm 1600. Một &nbsp;quyển khác được viết tại Anh vào năm 1997 và được gửi ngược về quá khứ &nbsp;cho bạn. Đối với quyển thứ nhất, bạn sẽ thấy những ký tự thật buồn cười &nbsp;và phải tốn một thời gian dài bạn mới hiểu được cú pháp của nó. Nhưng &nbsp;một khi bạn đã học được tiếng Việt Nam thì những ký tự này không còn làm &nbsp;bạn ngạc nhiên nữa. Còn quyển sách thứ hai rất giống những ký tự bằng &nbsp;tiếng Anh mà bạn biết nhưng nó lại mang một ý nghĩa lạ lùng.</div><div><br></div><div>\" Điểm khác nhau cơ bản về mặt ngữ nghĩa là: C là ngôn ngữ lập trình thủ &nbsp;tục còn C++ là ngôn ngữ lập trình hướng đối tượng. Bạn có thể viết &nbsp;chương trình hướng đối tượng trong C, Pascal, thậm chí bằng Assembler. &nbsp;Tuy nhiên, bạn nên biết một điều là những ngôn ngữ này không được thiết &nbsp;kế cho lập trình hướng đối tượng như C++.</div><div>Đối với lập trình thủ tục, những gì ta nghĩ về chương trình gồm có một &nbsp;loạt các chức năng và cấu trúc dữ liệu. Những chức năng này sẽ tác động &nbsp;lên cấu trúc dữ liệu, điều tác chúng và cuối cùng là xuất thông tin kết &nbsp;quả. Họ ngôn ngữ lập trình thủ tục như C, Pascal được xây dựng để hỗ trợ &nbsp;cho kỹ thuật lập trình cấu trúc. Trong đó một vấn đề sẽ được phân rã &nbsp;thành những chương trình nhỏ hơn có thể giải quyết được.</div><div><br></div><div>Để cảm nhận được cách tiếp cận của lập trình thủ tục, tôi lấy một ví dụ &nbsp;là việc cập nhật lương cho nhân viên của một tổ chức. Bạn có thể tạo ra &nbsp;một thủ tục có tên là GiveARaise và truyền cấu trúc Employee cho thủ tục &nbsp;này. Trong C, mã lệnh viết cho tác vụ này như sau:</div><div><br></div><div>&nbsp;C Code:</div><div>Select All | Show/Hide</div><div><br></div><ol><li>#include <stdio.h></li><li>struct Employee</li><li>{</li><li>&nbsp; &nbsp; int salary;<br></li><li>&nbsp; &nbsp; int level;</li><li>};</li><li>void GiveARaise (struct Employee * pEmployee, double pctg);</li><li>void InitializeEmployee (struct Employee *pEmp) ;<br></li><li>int main()</li><li>{</li><li>&nbsp; &nbsp; struct Employee Emp;</li><li>&nbsp; &nbsp; InitializeEmployee(&Emp);<br></li><li>&nbsp; &nbsp; Emp.salary = 50 000;</li><li>&nbsp; &nbsp; Emp.level =3;</li><li>&nbsp; &nbsp; Printf(\"Emp''s salary : %d\\n\",Emp.salary);</li><li>&nbsp; &nbsp; GiveARaise(&Emp,.23);<br></li><li>&nbsp; &nbsp; Printf(\"Emp''s salary : %d\\n\",Emp.salary);</li><li>&nbsp; &nbsp; Return 0;</li><li>}</li><li>&nbsp;<br></li><li>void GiveARaise (struct Employee * pEmployee, double pctg)</li><li>{</li><li>&nbsp; &nbsp; int increment = (int)(pEmployee ->salary*pctg);</li><li>&nbsp; &nbsp; printf(\"Incrementing Employee''s salary by %d\\n\",<br></li><li>&nbsp; &nbsp; &nbsp; &nbsp; increment);</li><li>&nbsp; &nbsp; pEmployee->salary+=increment;</li><li>}</li><li>&nbsp;<br></li><li>void InitializeEmployee(struct Employee *pEmp)</li><li>{</li><li>&nbsp; &nbsp; pEmp->salary=50 000;</li><li>&nbsp; &nbsp; pEmp->level=3;<br></li><li>&nbsp; &nbsp; printf(\"Initializing Employee with salary :%d\\n\",</li><li>&nbsp; &nbsp; &nbsp; &nbsp; pEmp->salary);</li><li>}</li></ol><div>Khi biên dịch và chạy đoạn chương trình trên, kết quả xuất hiện trên màn hình là:</div><div><br></div><div>&nbsp;Output Code:</div><div>Select All | Show/Hide</div><div><br></div><ol><li>Initializing Employee with salary: 50000</li><li>Emp''s salary: 50000</li><li>Incrementing Employee''s salary by 11500</li><li>Emp''s salary: 61500<br></li></ol><div>Đoạn chương trình C đơn giản trên minh hoạ một số vấn đề mà người lập &nbsp;trình thủ tục phải đối mặt. Chúng ta sẽ đi lướt qua những vấn đề đó.</div><div><br></div><div>Trong chương trình trên có sử dụng một cấu trúc dữ liệu đơn giản là &nbsp;Emplyee. Cấu trúc này chỉ có những thuộc tính đó là lương hiện tại &nbsp;(salary) của nhân viên và bậc lương (level) của anh ta. Bạn có thể tưởng &nbsp;tượng rằng khi chương trình được phát triển lớn hơn, ta có thể thêm vào &nbsp;những thuộc tính khác như số năm làm việc, số điện thoại, địa chỉ, tên &nbsp;nhân viên, số bảo hiểm xã hội …</div><div><br></div><div>Trong đoạn chương trình này có hai hàm được định nghĩa. Một hàm làm công &nbsp;việc khởi tạo các thuộc tính trong cấu trúc Emplyee. Hàm thứ hai xác &nbsp;định mức tăng lương của một nhân viên cụ thể. Đây chỉ là chương trình &nbsp;minh hoạ nên nó rất đơn giản. Trong các chương trình thực tế có thể tạo &nbsp;ra những giao diện đồ hoạ để việc trao đổi thông tin với người dùng thân &nbsp;thiện hơn và hấp dẫn hơn.</div><div><br></div><div>Rõ ràng là một khi bạn muốn thêm vào những thuộc tính mới cho lớp &nbsp;Employee hoặc nếu bạn muốn thay đổi các thuộc tính đã có, ví dụ đổi mức &nbsp;lương từ số nguyên sang số thực, bạn phải thay đổi tất cả những hàm này.</div><div><br></div><div>Như vậy, một khi chương trình phát triển đến một độ phức tạp nào đó, &nbsp;việc quản lý các thủ tục của chương trình trở nên khó khăn hơn. Bạn cần &nbsp;quản lý một lượng lớn dữ liệu và cũng không có cơ chế kế thừa nên phần &nbsp;lớn các chương trình lập trình theo thủ tục phải làm mới gần như toàn &nbsp;bộ. Những gì mà bạn có thể thừa hưởng từ những chương trình trước đó chỉ &nbsp;là cắt và dán những đoạn mã nào đó.</div><div>Thế lập trình hướng đối tượng cung cấp cho lập trình viên những khả năng gì?</div><div>Ngôn ngữ lập trình hướng đối tượng đã xây dựng một mối liên kết khắng &nbsp;khít giữa cấu trúc dữ liệu và những phương thức điều tác chúng. Điều &nbsp;quan trọng là khi tiếp cận với lập trình hướng đối tượng những gì bạn &nbsp;phải nghĩ đến không còn là cấu trúc dữ liệu và các hàm điều tác. Thay &nbsp;vào đó bạn phải luôn nghĩ đến cái gọi là \"đối tượng\" (object).</div><div><br></div><div>Hầu hết mọi người khi nhìn vào một chiếc xe hơi, họ không nghĩ về những &nbsp;thông tin mà nó có và làm cách nào để điều quản những thông tin ấy. Họ &nbsp;nghĩ về các bánh xe, bộ truyền động, hộp số… Họ nghĩ về cách cho xe &nbsp;chạy, dừng lại, tăng tốc… Họ nghĩ về đường đi, cảnh sát công lộ và những &nbsp;vé phạt quá tốc độ… Nói ngắn gọn là hầu hết mọi người nghĩ đến những sự &nbsp;vật (things) và những sự vật đó làm những gì. Thực tế, đây là cách mà &nbsp;loài người nghĩ về mọi thứ. Quá trình tiến hoá hàng chục triệu năm đã &nbsp;dạy chúng ta cách nhìn về một thế giới như được lắp đầy bởi những sự &nbsp;vật. Một vài trong số những sự vật đó chúng ta có thể ăn, một số khác &nbsp;lại ăn chúng ta…</div><div><br></div><div>Một cách lý tưởng, phần mềm của chúng ta được mô hình hóa rất giống với &nbsp;thế giới thực. Nhìn theo góc độ này, những chương trình của chúng ta trở &nbsp;nên dễ hiểu hơn và dễ bảo trì hơn. Những đối tượng trong thế giới thực &nbsp;có những đặc tính và những hành vi riêng, đối tượng trong chương trình &nbsp;cũng vậy.</div><div><br></div><div>Bây giờ chúng ta xem những khác biệt trong ngôn ngữ lập trình hướng đối tượng mà cụ thể là C++. Hãy xem đoạn mã sau:</div><div><br></div><div>&nbsp;C++ Code:</div><div>Select All | Show/Hide</div><div><br></div><ol><li>#include <iostream.h></li><li>class Employee</li><li>{</li><li>public:<br></li><li>&nbsp; &nbsp; Employee(int salary, int level);</li><li>&nbsp; &nbsp; ~Employee(){}</li><li>&nbsp;</li><li>&nbsp; &nbsp; void GiveARaise(double pctg);<br></li><li>&nbsp; &nbsp; int GetSalary() const {return mSalary;}</li><li>private:</li><li>&nbsp; &nbsp; int mSalary;</li><li>&nbsp; &nbsp; int mLevel;<br></li><li>};</li><li>Employee::Employee(int salary, int</li><li>&nbsp; &nbsp; level):mSalary(salary),mLevel(level)</li><li>{<br></li><li>&nbsp; &nbsp; cout<<\"Initializing Employee with salary :\"<<mSalary<<endl;</li><li>}</li><li>void Employee::GiveARaise(double pctg)</li><li>{<br></li><li>&nbsp; &nbsp; int increment = int(mSalary*pctg);</li><li>&nbsp; &nbsp; cout<<\"Incrementing salary by \"<<increment<<endl;</li><li>&nbsp; &nbsp; mSalary+=increment;</li><li>}<br></li><li>int main()</li><li>{</li><li>&nbsp; &nbsp; Employee Emp(50000,3);</li><li>&nbsp; &nbsp; Cout<<\"Emp''s salary :\"<<Emp.GetSalary()<<endl;<br></li><li>}</li></ol><div>Trong chương trình trên chúng ta khai báo một lớp (class) có tên là &nbsp;Employee. Một lớp chẳng qua là một kiểu dữ liệu mở rộng. Chúng ta bắt &nbsp;đầu với những kiểu dữ liệu xây dựng sẵn trong C như kiểu int, double, &nbsp;float … nhưng bây giờ chúng ta thêm vào một danh sách bằng cách tạo ra &nbsp;một kiểu dữ liệu mới và sau đó khai báo biến sử dụng kiểu dữ liệu mới &nbsp;này.</div><div><br></div><div>Một kiểu dữ liệu có thể có những hành vi (behavior) và những thuộc tính &nbsp;(atribute). Hành vi được thể hiện bởi những phương thức (method) trong &nbsp;lớp, còn những thuộc tính được đại diện bởi các biến thành viên của lớp. &nbsp;Trong lớp Employee ở trên có 2 biến thành viên: mSalary và mLevel; 4 &nbsp;phương thức: hàm dựng (contructor), hàm hủy (destructor), hàm truy cập &nbsp;(accessor) GetSalary và GiveARaise.</div><div><br></div><div>Hàm dựng dùng để khởi tạo các biến khi đối tượng được tạo ra. Trong ví &nbsp;dụ của chúng ta, hàm dựng làm tác vụ khởi tạo giá trị cho hai biến là &nbsp;mSalary và mLevel.</div><div><br></div><div>Hàm hủy được dùng khi huỷ đối tượng và có tác dụng giải phóng tài nguyên &nbsp;như bộ nhớ mà đối tượng được cấp phát. Trong ví dụ này, hàm hủy không &nbsp;làm gì cả.</div><div><br></div><div>GetSalary chỉ làm công việc trả về giá trị của mSalary.</div><div><br></div><div>GetARaise là hàm thành viên của Employee và nó truy xuất được đến biến &nbsp;cục bộ mSalary. Hàm này được dùng khi bạn muốn tăng lương cho nhân viên.</div><div><br></div><div>\" Sử dụng đối tượng Employee như thế nào ?</div><div>Một \"khách hàng\" (client) của một lớp là bất kỳ đối tượng hay một hàm có &nbsp;gọi đến các phương thức của lớp. Trong trường hợp của chúng ta, hàm &nbsp;main() có gọi đến các phương thức của lớp Employee nên có thể xem hàm &nbsp;main() là một khách hàng của lớp này. Trong hàm main(), chúng ta tạo ra &nbsp;một thể hiện (instance) của lớp Employee.</div><div><br></div><div>Chúng ta xem lại những phân biệt giữa một lớp Employee và một đối tượng &nbsp;Employee cụ thể (giả sử đó là Fred, nhân viên của phòng tiếp thị). Lớp &nbsp;Employee là tổng quát cho tất cả nhân viên, những thuộc tính mà lớp &nbsp;Employee có là gì và hành xử của nó như thế nào? Employee được thể hiện &nbsp;trong C++ là một lớp. Đối với nhân viên cụ thể (Fred chẳng hạn) là một &nbsp;thể hiện của lớp và được đại diện trong C++ bởi một đối tượng.</div><div><br></div><div>\" Tại sao lại phải phiền phức đến thế ?</div><div>Bạn đã điều tác được cấu trúc Employee bằng những hàm trong C, vậy tại &nbsp;sao lại phải học những thứ phiền toái chỉ để phục vụ cho cùng một công &nbsp;việc ?</div><div>Một lợi điểm của hướng đối tượng là tạo ra những đối tượng có biên chặt &nbsp;chẽ hơn. Mọi thứ mà chúng ta biết và mọi thứ mà chúng ta làm được bó lại &nbsp;với nhau thành một gói gọn gàng. Ý tưởng này được gọi là bao đóng &nbsp;(encapsulation). Bằng cách bao đóng những phương thức và biến vào trong &nbsp;một thực thể đơn, chúng ta giảm được ức chế tâm lý cho lập trình viên. &nbsp;Những nhà phát triển hướng đối tượng chia giới lập trình hướng đối tượng &nbsp;thành hai loại: nhà cung cấp và khách hàng. Nhà cung cấp chuyên viết &nbsp;các lớp và làm cho nó chạy. Khách hàng kết hợp các thể hiện của những &nbsp;lớp này cho chúng làm việc với nhau.</div><div>Trở lại chương trình trên, giới khách hàng không cần biết lương của nhân &nbsp;viên được lưu trữ như thế nào trong lớp Employee. Tất cả những gì mà họ &nbsp;quan tâm là làm sao để có thể lấy được thông tin lương của một nhân &nbsp;viên cụ thể từ lớp Employee, làm sao để cho nhân viên tăng lương (bằng &nbsp;cách gọi phương thức GiveARaise).</div><div><br></div><div>Những phương thức này là một phần trong các giao tiếp (interface) của &nbsp;lớp Employee. Giao tiếp báo cho khách hàng biết những gì mà lớp có thể &nbsp;làm. Họ không thể biết được liệu thông tin lương của nhân viện có được &nbsp;lưu xuống cơ sở dữ liệu hay không, hay chỉ được lưu trong biến thành &nbsp;viên… Tất cả những chức năng bên trong đều không thể thấy được bởi các &nbsp;khách hàng. Khả năng này được gọi là che dấu dữ liệu (data hiding), nó &nbsp;là kết quả của sự bao đóng.</div><div><br></div><div>Ngoài ra, hướng đối tượng còn cung cấp hai lợi điểm rất lớn. Thứ nhất, &nbsp;khách hàng có thể lờ đi những chi tiết bên trong mà lo tập trung vào &nbsp;những thứ khác. Thứ hai, nó cho phép nhà cung cấp có thể thay đổi cách &nbsp;thức làm việc bên trong mà không làm đổ vỡ chương trình của khách hàng. &nbsp;Điều này cho phép phía nhà cung cấp có thể làm cho những lớp của anh ta &nbsp;ngày càng tốt hơn và hiệu quả hơn mà không buộc phía khách hàng phải &nbsp;viết lại mã lệnh.</div><div>Bây giờ chúng ta nói một ít về cách học C++ như thế nào?</div><div>Đừng cố học C++ như những ngôn ngữ khác. Hãy học những ưu điểm mà nó &nbsp;mang lại. Đừng bao giờ học theo kiểu: \"À, một class chỉ là một structs &nbsp;và thêm vào một số hàm\". Đúng ra là một class là một type mà nó định &nbsp;nghĩa những thuộc tính và hành vi của một thứ gì đó. Điểm mạnh của C++ &nbsp;là hỗ trợ lập trình hướng đối tượng . Do vậy bạn hãy bắt đầu từ điểm &nbsp;xuất phát này.</div><div><br></div><div>Trở lại với câu hỏi nên bắt đầu với C hay C++ trước ?</div><div><br></div><div>Đây là một quyết định nhạy cảm. Dù thế nào đi nữa thì bạn vẫn phải học &nbsp;C. Một là học C như là bước đệm để học các ngôn ngữ khác hay cụ thể hơn &nbsp;là C++, hai là bạn có thể học C khi học các kỹ thuật C++. Theo ý tôi, &nbsp;bạn nên học các khái niệm cơ bản của C trước khi bắt đầu với C++. Tôi &nbsp;cảm thấy nếu ngay từ đầu bạn cố gắng bắt đầu với C++, một ngôn ngữ hướng &nbsp;đối tượng, bạn sẽ mất đi những kỹ năng cần thiết phải có đối với một &nbsp;nhà lập trình.</div><div><br></div><div>Các trình biên dịch của Borland, và một vài cuốn sách dường như không &nbsp;phân biệt giữa C và C++. Thay vì vậy, họ lại phân biệt giữa ngôn ngữ cấu &nbsp;trúc và ngôn ngữ hướng đối tượng. Học C++ như một ngôn ngữ cấu trúc với &nbsp;các mở rộng C++ được kết hợp trong C sẽ giúp cho người học nắm bắt C dễ &nbsp;dàng khi học C++. Thường trong các buổi nói chuyện và thảo luận, tôi &nbsp;thường xem C như là ngôn ngữ cấu trúc và C++ là ngôn ngữ hướng đối &nbsp;tượng.</div><div><br></div><div>Khi viết một quyển sách về lập trình, các tác giả phải có một chọn lựa &nbsp;rõ ràng giữa C và C++. Họ không thể trình bày cả hai một cách tường tận &nbsp;trong khuôn khổ của một quyển sách mà không làm cho người đọc nhàm chán &nbsp;vì sự không rõ ràng giữa hai ngôn ngữ. Thông thường, một cuốn sách dạy &nbsp;C++ (OOP) sẽ không thể đào sâu những kỹ năng lập trình thuần tuý tạo nên &nbsp;sự mạnh mẽ trong lập trình C. Những cuốn sách C++ cho người mới bắt đầu &nbsp;thường đề cập tới những vấn đề một cách rời rạc và sơ sài. Tạo cho &nbsp;người đọc một sự hiểu biết thiếu tính toàn diện.</div><div><br></div><div>Khi khởi đầu với các cuốn sách về C, bạn sẽ tiếp cận vấn đề một cách khá &nbsp;chi tiết và có được những bước tiến dễ dàng trên một nền tảng kiến thức &nbsp;cơ bản. Tuy nhiên, những cuốn sách này lại đề cập quá nhiều những vấn &nbsp;đề định dạng xuất nhập. Những vấn đề này thực sự hữu dụng trong C và &nbsp;giúp cho người đọc hài lòng với một công việc khó khăn, nhưng đó chỉ là &nbsp;một phần rất nhỏ đối với một ngôn ngữ. Với C++, bạn sử dụng một phương &nbsp;thức xuất nhập hoàn toàn khác. Các kỹ năng về định dạng xuất nhập trong C &nbsp;không phải là quá lãng phí, nhưng nó không phải là cực kỳ hữu dụng. Nắm &nbsp;bắt tốt những kỹ thuật định dạng trong C sẽ rất thuận lợi khi lắp ghép &nbsp;hay duy trì những đoạn code cũ.</div><div><br></div><div>Tôi nghĩ, nếu muốn trở thành một nhà lập trình viên chuyên nghiệp, và &nbsp;hiểu được cách viết những đoạn code một cách hiệu quả bạn nên bắt đầu &nbsp;với C. Nếu bạn có sở thích, và đang tìm một con đường học lập trình &nbsp;nhanh chóng, và sẽ quay trở lại những vấn đề cần thiết, bạn có thể bắt &nbsp;đầu với C++.</div>","cat_id":{"_id":11,"name":"Kỹ năng"},"creator_id":13401,"created_at":"2017-12-10T14:14:00.416Z","down_point":1,"up_point":19,"tags":[]}