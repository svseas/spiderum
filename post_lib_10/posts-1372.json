{"_id":11175,"title":"Git cơ bản - Phần 1: Những lệnh cơ bản và quy trình sử dụng Git","body":"<div><figure class=\"fullscreen\"><img src=\"https://s3-ap-southeast-1.amazonaws.com/img.spiderum.com/sp-images/dccfdb70ed6c11e7b87d99aee97cf816.png\" class=\"fr-fic fr-dib img-focus\"><figcaption contenteditable=\"false\" placeholder=\"Chú thích ảnh (không bắt buộc)\" class=\"image-description\"></figcaption></figure></div><div>Cho dù bạn đang muốn tự mình thành lập một nhóm phát triển dự án của riêng mình hay muốn xin việc vào một công ty công nghệ, quản lý phiên bản (version control) của phần mềm là điều kiện tiên quyết bạn phải thành thạo. Có lẽ hiện nay, không có công ty nào, dù là startup mới khởi nghiệp cho đến những tập đoàn lớn lại không sử dụng version control.</div><div>Git và Github là 2 công cụ version control phổ biến nhất thế giới. Nó không những vừa giúp bạn kiểm soát tốt dự án và công việc của mình mà còn giúp team bạn có thể tăng tốc độ hoàn thành tiến độ, tránh những xung đột không đáng có về code trong quá trình phát triển.</div><div>Nếu bạn chưa biết đến Git là gì, hãy đọc bài viết này trước tại <a href=\"https://spiderum.com/bai-dang/Git-va-Github-Nhung-cong-cu-nen-thanh-thao-ma-dai-hoc-khong-day-ban-8hm\" rel=\"noopener noreferrer\" target=\"_blank\">Spiderum</a></div><div><strong>Yêu cầu:</strong></div><ul><li>Đã cài đặt git trong hệ điều hành</li><li>Biết sử dụng những lệnh cơ bản trong terminal<br>(cd, mkdir, rm ...)</li><li>Biết sử dụng editor trong terminal (vim, emacs, nano)</li></ul><div><strong>Cài đặt config của Git</strong></div><div>Khi bắt đầu sử dụng Git, bạn nên cài đặt các global config trong Git để thuận tiện cho việc sử dụng sau này. Ví dụ khi cần push code của bạn lên Github, bạn sẽ phải sử dụng email và password github mỗi lần push. Sau đây là một số config git hay sử dụng:</div><pre>$ git config --global user.name \"Long Le\"\n# Tên hiển thị của bạn khi bạn thực hiện thay đổi trong project\n\n$ git config --global user.email \"vietlong2110@gmail.com\"\n# Email hiển thị của bạn\n\n$ git config --global credential.helper 'cache --timeout 86400'\n# Ghi nhớ mật khẩu trong vòng 1 ngày\n\n$ git config --global <a href=\"color.ui\" target=\"_blank\">color.ui</a> true\n# Làm git log màu mè hơn =))) Trông thế nhưng cái này cũng khá quan trọng đó :))</pre><div>Ví dụ trong bài</div><div>Để dễ hình dung, ta lấy ví dụ sau:</div><ul><li>Long tạo một project trong thư mục myProject</li><li>Long khởi tạo repo git trong myProject</li><li>Long thêm vào file <a href=\"README.md\" target=\"_blank\">README.md</a></li><li>Long commit sự thay đổi của project</li><li>Long thêm vào file LICENSE và chỉnh sửa <a href=\"README.md\" target=\"_blank\">README.md</a></li><li>Long commit sự thay đổi của project</li></ul><div><strong>Khởi tạo một repo</strong></div><pre>$ mkdir myProject\n$ cd myProject\n$ git init\nInitialized empty Git repository in /Users/Minh/myProject/.git</pre><div><div>Trong ví dụ này, file git trong máy Minh sẽ được lưu ở /Users/Minh/myProject/.git</div></div><div><strong>Quy trình làm việc với Git</strong></div><ul><li>Tạo file <a href=\"README.md\" target=\"_blank\">README.md</a></li><li>Thêm vào stage</li><li>Commit sự thay đổi của project</li><li>Tạo file LICENSE và sửa file <a href=\"README.md\" target=\"_blank\">README.md</a></li><li>Thêm vào stage</li><li>Commit sự thay đổi của project</li><li>Tiếp tục quá trình trên...</li></ul><div><strong>Kiểm tra trạng thái của Git với project</strong></div><ul><li>Tạo file <a href=\"README.md\" target=\"_blank\">README.md</a></li><li>Kiểm tra trạng thái tracking hiện tại của Git</li></ul><pre>$ vim <a href=\"README.md\" target=\"_blank\">README.md</a>  //Tạo file <a href=\"README.md\" target=\"_blank\">README.md</a>\n$ git status\nOn branch master\n\nInitial commit\n\nUntracked files:\n  (use \"git add ...\" to include in what will be committed)\n\n<a href=\"README.md\" target=\"_blank\">README.md</a>\n\nnothing added to commit but untracked files present (use \"git add\" to track)</pre><div><div>Ở đây, Git phát hiện ra sự có mặt của file <a href=\"README.md\" target=\"_blank\">README.md</a> được tạo thêm trong folder nhưng chưa được \"track\". Muốn Git track được các file trong folder, ta phải thêm file vào stage</div></div><div><strong>Thêm file vào stage</strong></div><ul><li>Thêm file <a href=\"README.md\" target=\"_blank\">README.md</a> vào stage</li><li>Kiểm tra trạng thái</li></ul><pre>$ git add <a href=\"README.md\" target=\"_blank\">README.md</a>\n$ git status\nOn branch master\n\nInitial commit\n\nChanges to be committed:\n  (use \"git rm --cached ...\" to unstage)\n\nnew file:   <a href=\"README.md\" target=\"_blank\">README.md</a></pre><div><strong>Commit sự thay đổi của project</strong></div><ul><li>Commit file <a href=\"README.md\" target=\"_blank\">README.md</a></li><li>Kiểm tra trạng thái</li></ul><pre>$ git commit -m \"create README\"\n[master (root-commit) 436af89] create README\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 <a href=\"README.md\" target=\"_blank\">README.md</a>\n$ git status\nOn branch master\nnothing to commit, working tree clean</pre><div><div>Option -m của git commit giúp bạn có thể viết tóm tắt nội dung commit ngay trong câu lệnh (create README). Nếu không dùng option -m, git sẽ mở default editor (nano, vim... tùy vào default config) và bạn sẽ phải viết tóm tắt nội dung commit vào đó.</div></div><div><div>Trạng thái hiện tại của project là: Trong nhánh&nbsp;master, không có sự thay đổi nào cần commit. Nhánh&nbsp;master&nbsp;là nhánh chính mặc định của git. Sẽ có những lúc bạn cần nhiều nhánh hơn là chỉ làm việc trên một nhánh chính (trong thực tế là bạn sẽ luôn cần!). Ở những phần sau, tôi sẽ nói kĩ hơn về các nhánh trong Git. Hiện tại, tất cả các câu lệnh Git đều chỉ tương tác ở nhánh&nbsp;master.</div></div><div><strong>Lặp lại quá trình</strong></div><ul><li>Tạo file LICENSE và sửa file <a href=\"README.md\" target=\"_blank\">README.md</a></li><li>Kiểm tra trạng thái</li></ul><pre>$ vim LICENSE  //Tạo file LICENSE\n$ vim <a href=\"README.md\" target=\"_blank\">README.md</a>  //Sửa file <a href=\"README.md\" target=\"_blank\">README.md</a>\n$ git status\nOn branch master\nChanges not staged for commit:\n  (use \"git add ...\" to update what will be committed)\n  (use \"git checkout -- ...\" to discard changes in working directory)\n\nmodified:   <a href=\"README.md\" target=\"_blank\">README.md</a>\n\nUntracked files:\n  (use \"git add ...\" to include in what will be committed)\n\nLICENSE\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")</pre><div><div>Lưu ý: Do file <a href=\"README.md\" target=\"_blank\">README.md</a> đã được commit vào trong nhánh master nên Git đã biết file <a href=\"README.md\" target=\"_blank\">README.md</a> thay đổi so với lần commit trước. File LICENSE mới tạo sẽ được Git cho vào \"Untracked files\".</div></div><ul><li>Thêm LICENSE và <a href=\"README.md\" target=\"_blank\">README.md</a> vào stage</li><li>Kiểm tra trạng thái</li><li>Commit</li></ul><pre>$ git add <a href=\"README.md\" target=\"_blank\">README.md</a> LICENSE\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD ...\" to unstage)\n\nnew file:   LICENSE\nmodified:   <a href=\"README.md\" target=\"_blank\">README.md</a>\n$ git commit -m \"add LICENSE and modify README.md\"\n[master 286cf99] add LICENSE and modify <a href=\"README.md\" target=\"_blank\">README.md</a>\n 2 files changed, 1 insertion(+)\n create mode 100644 LICENSE</pre><div><strong>Timeline lịch sử Git của project</strong></div><div>Đến thời điểm hiện tại, Git đã có 2 commits trong nhánh&nbsp;master. Vậy làm thế nào để xem timeline lịch sử của Git khi đã có quá nhiều commit? Câu trả lời là&nbsp;git log</div><pre>$ git log\ncommit 286cf99394f933b92a3bedf42afece49ef8510d8 (HEAD -> master)\nAuthor: Long Le \nDate:   Thu Nov 23 17:13:22 2017 +0700\n\n    add LICENSE and modify <a href=\"README.md\" target=\"_blank\">README.md</a>\n\ncommit 436af897cf952e6ce183e5f5fd168b3251eced59\nAuthor: Long Le \nDate:   Thu Nov 23 16:46:18 2017 +0700\n\n    create README</pre><div>Ở đây \"Long Le\" chính là \"config user.name\",&nbsp;\"vietlong2110@gmail.com\" chính là \"config user.email\".</div><div><div>Nếu bạn đã setting git config --global <a href=\"color.ui\" target=\"_blank\">color.ui</a> true, bạn sẽ thấy git log thêm vào màu sắc rất rõ ràng!</div></div><div>Các cách khác nhau để thêm file vào stage</div><div>Trong ví dụ trên, khi bạn cần thêm 2 files <a href=\"README.md\" target=\"_blank\">README.md</a> và LICENSE vào stage, bạn phải liệt kê tên của cả 2 files trong câu lệnh git add. Vậy nếu có rất nhiều file cần thêm vào trong 1 lần commit thì quả là bất tiện. Vì vậy có rất nhiều cách để thêm file(s) vào stage trong các trường hợp khác nhau như sau:</div><pre>$ git add  //Thêm file(s) theo tên các files được liệt kê\n$ git add --all //Thêm tất cả các file(s) bị thay đổi hoặc vừa mới tạo trong project\n$ git add *.txt // Thêm tất cả các file(s) có đuôi .txt\n$ git add docs/*.txt // Thêm tất cả các file(s) có đuôi .txt trong thư mục docs\n$ git add docs/*.txt // Thêm tất cả các file(s) trong thư mục docs</pre><div><strong>Kết</strong></div><div>Như vậy quy trình sử dụng git sẽ là:</div><pre>$ git add docs/*.txt // Thêm tất cả các file(s) có đuôi .txt trong thư mục docs</pre><div><div>Git có rất nhiều câu lệnh. Để tra cứu thêm cách sử dụng các câu lệnh, bạn có thể sử dụng git help &nbsp;để hiểu rõ hơn cách sử dụng</div></div><div>Chúc mừng bạn!<br>Giờ thì bạn đã hiểu quy trình và cách thức một developer sử dụng Git hàng ngày để kiểm soát phiên bản của project rồi đó!</div><div>Đọc thêm&nbsp;</div><div><a href=\"https://blog.tech4startup.org/git-co-ban-phan-2/\" rel=\"noopener noreferrer\" target=\"_blank\">Git cơ bản - Git và Remote</a>&nbsp;</div><div><a href=\"https://blog.tech4startup.org/git-co-ban-phan-3/\" rel=\"noopener noreferrer\" target=\"_blank\">Git cơ bản - Branching và Merging</a></div><div><a href=\"https://blog.tech4startup.org/git-co-ban-phan-4/\" rel=\"noopener noreferrer\" target=\"_blank\">Git cơ bản - Quy trình làm việc nhóm cơ bản</a></div><div><a href=\"https://blog.tech4startup.org/git-co-ban-phan-5/\" rel=\"noopener noreferrer\" target=\"_blank\">Git cơ bản - Remote Branch và Tag Version</a></div>","cat_id":{"_id":12,"name":"Khoa học - Công nghệ"},"creator_id":11024,"created_at":"2017-12-30T14:21:30.545Z","down_point":0,"up_point":12,"tags":[]}