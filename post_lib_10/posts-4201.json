{"_id":6633,"body":"<p dir=\"ltr\"><img class=\"fr-dib aligncenter\" src=\"http://img.spiderum.com/sp-images/a699d070e31711e6b0972b84f1651fc5.jpg\"></p><p dir=\"ltr\">Hi,</p><p dir=\"ltr\"><strong>Ngoài lề:</strong> Theo như ông chú làm ở Spiderum mình cho hay thì hình như Spiderum được viết trên nodejs/expressjs phía sever còn front-end thì sử dụng framework cũng họ nhà JavaScript là Angular2 with TypeScript (1 superset của Javascript). Vậy các bạn đã đủ thấy JS bá đạo chưa :))</p><p dir=\"ltr\">Khoảng gần 1 tháng trước, lúc mình mới bắt đầu yêu JavaScript thì mình quyết định học theo cuốn Data Structures and Algorithms with JavaScript của O'Reilly, vì mình nghĩ cấu trúc dữ liệu và giải thuật chính là trái tim của lập trình. Lúc đầu khá suôn sẻ, mọi thứ cuốn sách viết đều rất rõ ràng và tỉ mỉ. Nhưng được một thời gian thì mình cảm thấy bắt đầu khô khan và dần đánh mất đi một phần nào động lực. Mình bắt đầu tìm đến những nguồn học khác. Và tình cơ vài ngày trước mình khám phá ra khóa học JavaScript trên Udemy quả thực đã khai sáng và tiếp thêm động lực cho mình rất nhiều. À tất nhiên mình vẫn tiếp tục học DS&A nhé.&nbsp;</p><p dir=\"ltr\">Mình sẽ tiếp tục với<a href=\"http://spiderum.com/bai-dang/1-Nhat-ki-hoc-JavaScript-Syntax-parsers-Execution-contexts-Lexical-environments-545#\">&nbsp;bài học</a> mà mình đã học được vài ngày trước. Hứa hẹn rằng bài viết này sẽ rất dài.&nbsp;</p><h2 dir=\"ltr\">#2 Objects, The global environment, The Creation and Hoisting</h2><h3 dir=\"ltr\">Objects - Đối tượng</h3><p dir=\"ltr\"><em>Object</em>&nbsp; là một khái niệm vô cùng quan trọng trong JavaScript và chúng ta sẽ dành phần lớn thời gian với nó. Nhưng trước hết chúng ta cần biết nó là gì phải không?</p><blockquote><p dir=\"ltr\"><em>Name/Value pair</em>: A name which maps to an unique value.</p></blockquote><p dir=\"ltr\">Tại sao phải bắt đầu với cặp name/value (hay còn được gọi là key/value pair hay attribute/value pair) ? Hãy xem!</p><p dir=\"ltr\">Với mỗi tên sẽ được ánh xạ (không biết mình dùng từ này có đúng không?) tới một giá trị duy nhất.&nbsp;</p><p dir=\"ltr\">Tên có thể được định nghĩa nhiều lần nhưng chỉ có thể có một giá trị trong 1 context nhất định.</p><p dir=\"ltr\">Một giá trị (value) có thể có chứa tập hợp những name/value pair khác.</p><p dir=\"ltr\">Có vẻ lằng nhằng rồi đúng không? Hãy xem 1 ví dụ sau:</p><p dir=\"ltr\"><img src=\"https://lh4.googleusercontent.com/bmHykFBxt7_5bi0j4mNDxrEpPJK34NqgKq9ZM6zAWj1_uX1QH5uxr5H_hgMzrReDt4Qm5MflzBddMQkpUd9DO4owVP-QkOrG0QfXxtTKbAcEVBx8od_16xnQhYVDXmde_Ecd7Hkw\" height=\"38\"></p><p dir=\"ltr\">đây chính là 1 cặp name/value với name: 'adress' &nbsp;và giá trị được gán tương ứng là '96 Le Thanh Nghi' .&nbsp;</p><p dir=\"ltr\">Khi nói đến <em>Object</em> chúng ta có thể dùng thuật ngữ <em>name/value pair</em> để định nghĩa nó:</p><blockquote><p dir=\"ltr\">Object is a collection of name/value pairs</p></blockquote><p dir=\"ltr\"><em>Object</em> là một tập hợp các cặp <em>name/value</em>. Đây có thể coi là một định nghĩa đơn giản nhất khi nói về <em>object</em> trong JavaScript.</p><p dir=\"ltr\">Lúc trước chúng ta có đề cập đến, đó là 1 giá trị có thể chứa nhiều cặp <em>name/value</em> khác? vậy là sao? Hãy xem hình minh họa</p><p dir=\"ltr\"><img src=\"https://lh4.googleusercontent.com/DX_dkYfOPGrmYWpFoan6UrxD5JXC0Dvt7L7ddHmiZrf7eDRm9-Dh0PemNuTggqffEDbMDpMkeAARxz1y0tAIdccITK0x7P8itLeXd87V6Yj_FPFHX1j4k47xCSl8n4MloyzK3ejA\" height=\"189\"></p><p><br></p><p dir=\"ltr\">Rõ ràng chứ? <em>Object</em> là tập hợp các <em>name/value pair</em>. Các <em>value</em> lại có thể là tập hợp của các <em>n</em><em>ame/value pair</em> khác...</p><p><br></p><h3 dir=\"ltr\">The Global Object and The Global Environment</h3><p dir=\"ltr\">Mỗi khi các dòng lệnh được thực thi. Chúng được thực thi trong một <em>excution context (Global)</em> (Javascript engine sẽ <em>parsing</em>&nbsp; (phân tích cú pháp), <em>verify</em> rồi <em>execute</em>... những dòng lệnh đó). Javascript engine sẽ <em>wrap</em> (gói) toàn bộ các dòng lệnh của bạn trong 1 <em>execution context</em>. Khi các bạn nhìn vào một chương trình javascript đầu tiên sau đây các bạn sẽ được xem <em>execution context</em> được tạo ra như thế nào.</p><p dir=\"ltr\">Khi chương trình javascript đầu tiên của bạn được khởi động. Thì ngay lập tức được JS Engine tạo 1 <em>global environment</em> chứa đựng 1 <em>global object</em> và một biến đặc biệt đó là '<em>this</em>'.</p><p dir=\"ltr\"><img src=\"https://lh3.googleusercontent.com/znJmxxhk5C1oa6oVRiuOxdPQqB7Up4msg2Gk1x5757sOmHadt942dWE0NAaKFN9dMdzpZo0XHXnB1jijOfAFfin8cJcc9rR9k_p2EET5CHjax4SGTyq-tPzSOsjjQY98s2ty2YtL\" height=\"250\"></p><p><br></p><p dir=\"ltr\">Khi chạy chương trình Js engine sẽ tạo cho ta 1<em>&nbsp;global object</em> và một biến đặc biệt <em>'this</em>' nằm trong 1 <em>execution context (global)</em>. <em>Global object</em> này không bao giờ được sử dụng trực tiếp, không thể được tạo ra bằng từ khóa '<em>new</em>' . Được tạo ra ngay lập tức cùng với các hàm, hằng số có sẵn khi các đoạn mã script được khời tạo.</p><p dir=\"ltr\">Mình sẽ chứng minh cho các bạn thấy. khi mình chạy một chương trình rỗng. <em>Global object</em> được tạo ra như thế nào.</p><p dir=\"ltr\">Đây là khi mình chạy một chương trình rỗng:</p><p dir=\"ltr\"><img src=\"https://lh5.googleusercontent.com/QfSFdPlzlhrKztmGLUlAao4mE2Ou_Gv1LKDdOkdGr-x9nmIy6wSY18MFSYk7EeWIUiP-P0T7j-ebonvzKCXNrZM7C7YL_ac-zuhwbhIx4V3GUs9qUrLMaA6Mgj_ZHES7aoSbQodh\" height=\"339\"></p><p><br></p><p dir=\"ltr\">Đây là cửa sổ console mình sử dụng qua live preview trên bracket. các bạn có thể tải về và học cách sử dụng tại<a href=\"http://brackets.io/\">&nbsp;brackets.io.</a></p><p dir=\"ltr\">Bây giờ hãy xem chuyện gì xảy ra khi mình dùng từ khóa 'this'</p><p dir=\"ltr\"><img src=\"https://lh3.googleusercontent.com/PUamvevw2bfjFsS0SlkB0yLVo6ECfp9LnqdgALU7b5VSOSbKgcjZDio8fczmhjeNo-qW1p1HjQvUSlYG84NykgVlpsv15c4tpAFie_7LlDcixKhiwntWCs3TYvbQCG80AdyOsiUn\" height=\"339\"></p><p dir=\"ltr\">What? Có gì đó ở đây à? Tôi đâu có đưa những thứ này vào chương trình của tôi đâu? Đúng vậy. <em>Execution context</em> đã được tạo bởi javascript engine và nó quyết định giá trị của '<em>this</em>' sẽ là gì. Ở đây chúng ta có thể thấy <em>this</em> chính là <em>window</em> hay <em>browser window</em> bởi vì chúng ta đang chạy Javascript trên browser. Và thật thú vị. Chúng ta có một object '<em>window</em>' &nbsp;cũng có cùng giá trị bằng cách hit '<em>window</em>' trên cửa sổ console:</p><p dir=\"ltr\"><img src=\"https://lh6.googleusercontent.com/_ioaX6rD3BQJ2RHF-NNtbaUpp__k-jMLTUA8ah9PoyWOWvTDgspPjCkTCsak5lSwaetLkVzUzm5lgmupi55Wn-6br3_f23bIFrSB5L3oRkO3cVz4fbwku30gwRQdEEMsjdgwi9pg\" height=\"116\"></p><p dir=\"ltr\">Biến đặc biệt mà js engine đã tạo ra: <em>'</em><em>this'&nbsp;</em>đã <em>reference</em> đến <em>global object&nbsp;</em>(<em>window</em>) nên chúng có cùng giá trị!</p><p dir=\"ltr\">Vậy mỗi khi chúng ta chạy javascript trên window thì việc đầu tiên là js engine sẽ khởi tạo <em>global object window</em>. Mỗi tab trên trình duyệt sẽ tạo 1 <em>execution context</em> khác nhau, tạo ra các object window riêng biệt.</p><p dir=\"ltr\">Vậy tiếp theo chuyện gì sẽ xảy ra nếu mình viết một vài dòng code ở đây?</p><p dir=\"ltr\"><img src=\"https://lh6.googleusercontent.com/kTq1g4dBaxvYe9EGBaoZQ0lo1B2gkRdlBuHINoYMt6WTerA-gN9EfZJgj1C6govrxfpV4Sa40idVwkItrHcj-4vqaiohWOgYugDfXCRlmHaiGp_xu-H2Oo0lXcgUj9IW3KkyXlsd\" height=\"107\"></p><p dir=\"ltr\">Giờ run nó nhé! Mình sẽ dùng từ khóa this để xem có chuyện gì xảy ra với <em>global object</em>:</p><p dir=\"ltr\"><img src=\"https://lh4.googleusercontent.com/453O6iqgxyjZeZ9U4GOsJSFODUe8yKyhhLZ6ok2x2TJuyJQ6oY3T9OS5Bi6LOl1zKrPkkpUOYYTmpQ0Q-TGU9xgJEmk6mUd-cOrIY9qBgCwYB0ifZ3IHa0WKwPzYSi4gysw_pXZd\" height=\"339\"></p><p dir=\"ltr\">Nên nhớ <em>window object</em> là <em>collection</em> của các <em>name/value pair</em>. Chúng ta có thể tìm thấy ở đây biến 'a' và <em>function</em> 'b()' trong <em>window object</em>. Trong javascript khi bạn khai báo 1 <em>variable</em> hoặc 1 <em>function</em> không nằm trong 1 <em>function</em> khác thì những biến và <em>function</em> này sẽ được nhận diện trong <em>global object</em>. Bạn có thể gọi những biến hoặc hàm này lên như thế này.&nbsp;</p><p dir=\"ltr\"><img src=\"https://lh6.googleusercontent.com/AuDvxFXKOzVoAwtqWI2Ie6Hyetsd-8-Ar9vSbZVDWlsie2gg_YCKnqgFTMZEod1ZJS-6CF5qI_t4aSSYQjs13MRKT2QVfzKn6pfrcBz9T6xMtTj67YrFkpnY_bnw8OEmzHgpIhan\" height=\"127\"></p><p dir=\"ltr\">Thật là vi diệu đúng không :)))</p><h3 dir=\"ltr\">The creation phase and Hoisting</h3><p dir=\"ltr\">Thế nào là <em>the creation phase</em> (giai đoạn khởi tạo)? Chúng ta hãy cũng xem 1 ví dụ, thử xem qua đoạn code sau xem sao:&nbsp;</p><p dir=\"ltr\"><img src=\"https://lh3.googleusercontent.com/Hy7eN5TBNt8uTDnSDYng0WLgOA8Aq_OYheh1LERfllpquVldAjsQYn43c-pw55uCHB2r--XnmsZmLadty5YUjtml9IaFRyuZCFqkMsiIDZAsvBU614gg0IruIdGEh0sitBc-xezR\" height=\"170\"></p><p dir=\"ltr\">Các bạn mong đợi chuyện gì sẽ xảy ra? Cái gì sẽ được in lên màn hình thông qua việc gọi (<em>invoke</em>) hàm b() và in ra màn hình biến a qua dòng lệnh console.log(a) ? Các bạn cũng đoán được kết quả là: 'Hello Spiderum' và 'Xem có gì hay ho không?' đúng k?</p><p dir=\"ltr\"><img src=\"https://lh4.googleusercontent.com/Y9GeeG7YOVvmx5_MB2gfnLD6HwoTX-3fE55I3WFbY4f-j0Wg4RrdGCF31fAGXt2HSNjo_0w1Y85QBlZHarHleg2SgfBiV8cA46kAsNrC9FabILoSmIFuaJ2WfEqyeYbDIGk0YsVB\" height=\"125\"></p><p dir=\"ltr\">Quả đúng như những gì ta mong đợi. Vậy bây giờ thử làm một số thứ điên điên 1 chút xem sao. Thay đổi 1 chút nhỉ:</p><p dir=\"ltr\"><img src=\"https://lh5.googleusercontent.com/aDNyso5LL_oJf8CCCWAtuODA1yhdJWtwujPvzmhuqBHSl2C8m3vhHjLloHqq7jNidcGt7-QMrvhOApcZxeLlwtPg7x4494tyZbs2D100LUBIlgaespMiwJ5f-dazv-P-PUV6tws6\" height=\"173\"></p><p dir=\"ltr\">Bây giờ bạn mong đợi điều gì sau khi chạy đoạn code này? Khi mà chúng ta gọi thực thi hàm b() trước khi <em>function</em> b() được định nghĩa?</p><p dir=\"ltr\">Hầu hết các programing languages đều không cho phép chúng ta làm điều này vì hầu hết các programing languages đều <em>execute</em> từ trên xuống. (<em>one line at a time</em>). Chúng ta chưa thể sử dụng b() khi nó còn chưa được định nghĩa. Vì vậy chúng ta hi vọng rằng nó sẽ văng ra 1 lỗi nào đó đúng k? Nên nhớ Javascript rất \"tà đạo\" :))&nbsp;</p><p dir=\"ltr\">Hãy cùng xem kết quả:</p><p dir=\"ltr\"><img src=\"https://lh4.googleusercontent.com/jQsZqZQBGyu59yzWDIlAM_F5BzNAZmPYxezZQjE2WBLUGDbBj65bZ3oTAcH59SR_yrnVwVbHmhyqlzGFYyK81vd5Nf0Ieo5dQlXgqJKr6s09y3IB8EXi9vk933IYbmIniJwfhWvb\" height=\"125\"></p><p dir=\"ltr\">Quả thực JS thật vi diệu. Nó đã chạy function b() để cho ra kết quả 'Xem có gì hay ho không' và thay vì báo lỗi khi chạy console.log(a), nó lại trả về kết quả là 1 giá trị đặc biệt '<em>undefined</em>' . Tại sao? Giờ chúng ta thử thay đổi 1 chút:&nbsp;</p><p dir=\"ltr\"><img src=\"https://lh5.googleusercontent.com/91dDjvWkoBApENdGelMHDWsaEz0-8dPVJKFtrPsZzfrzqi1Xh_KFN7IgDT5JVdZuQPyJ1Q8Cm0uGG3RIf_rYRTP8K4iUnHEkGQ6Np_Je0Fs0JrVaWoIt9uv8XIV8efcpR0WVuMCX\" height=\"163\"></p><p dir=\"ltr\">Chúng ta sẽ comment dòng khai báo biến a lại. Chương trình biên dịch sẽ bỏ qua dòng này coi như không khai báo nó. và xem thử kết quả:</p><p dir=\"ltr\"><img src=\"https://lh3.googleusercontent.com/jW3vnGu4WAYEahSgZywfnLiCjKG01RYp4DBNPPYjVvuy6IrLGtTTnzhqPwMm7mqbW0DuEodb6J01N4Lk40ofAwMbmf6F_C4vulhUFX68s3CMCYusaCrZzK70ovUqtbC2hAgIosvW\" height=\"105\"></p><p dir=\"ltr\">Và kết quả là <em>a is not defined</em>! Đến lúc hack não nè. <em>Undefined</em> khác với<em>&nbsp;is not defined</em> ư? Yep! Chúng khác nhau. <em>Undefined</em> là một từ khóa và là một giá trị đặc biệt được <em>setup space</em> trên <em>memory</em> còn một biến được gọi là <em>is not defined</em> thì không.&nbsp;</p><p><br></p><h3 dir=\"ltr\">Hoisting:</h3><p dir=\"ltr\">Trong JavaScript có một thuật ngữ được gọi là <em>hoisting</em>. Là khi chương trình được thực thi, Javascript engine sẽ <em>phisically move</em> toàn bộ <em>functions</em> và <em>variables</em> lên đầu mỗi <em>e</em><em>xcution context</em>. Như thế này:</p><p dir=\"ltr\"><img src=\"https://lh6.googleusercontent.com/emqZTbZjatdZl_vT7M_s8_T_v8DfaUwE0X59s8x54QnWO_a4uTutKKs89Nmyp1_w3dzNKZgvHKlWbx_o_5rG-MYlgi5rGSCyOYXzMoXdbFWu1qosx8C5FuJheMavAlbhZzYbzRo3\" height=\"230\"></p><p dir=\"ltr\">Ơ nếu nó thế thì vẫn có gì đó sai sai. Sao mình rõ ràng có khai báo biến a = 'Hello Spiderum' rồi, rồi thì biết a được hoist lên đầu execution context rồi cơ mà. Sao lại nhận được giá trị là <em>undefined</em>?&nbsp;</p><p dir=\"ltr\">Đúng thế. Sau khi <em>hoist</em> tất cả <em>variables</em> và <em>functions</em> lên top mỗi <em>execution context</em>, JS engine còn assign (gán) cho mỗi variables một giá trị đặc biệt là <em>undefined</em>, và được <em>setup</em>\n<em>space</em> trên <em>memory</em>. &nbsp;</p><h3 dir=\"ltr\">The Creation Phase: Giai đoạn khởi tạo:</h3><p dir=\"ltr\"><img src=\"https://lh4.googleusercontent.com/fBMQ9oe7vz9M3pso7RWp-QEbkshdyxSvZCqUxSnOApzcCAI34LgpmeYXZfNfuT3m1JXpfvvYCA73JGRBqrq_dk1a8eVHubYWOePnSRQhSeLeZCjMqZv-9FKvL_MX8boFblDl2XF1\" height=\"372\">&nbsp;</p><p dir=\"ltr\">Thực chất trước khi các dòng code được thực thi <em>line by line</em> thì JS engine đã sẵn sàng xong việc s<em>etup memory space</em> cho các <em>variables</em> và <em>functions&nbsp;</em>đặt chúng ở trạng thái sẵn sàng truy cập. Còn đối với các biến chúng được gán tạm một giá trị chưa xác định là <em>undefined</em>. Nên khi chúng ta <em>execute</em> đến đoạn console.log(a) thì <em>oops</em>! Tôi chưa biết thằng 'a' này là cái khỉ gì cả, trong bộ nhớ nó vẫn là <em>undefined</em>! &nbsp;Tôi sẽ trả nó về giá trị <em>undefined</em>!</p><p>That's it!</p><p dir=\"ltr\">Rõ ràng rồi chứ?&nbsp;</p><p dir=\"ltr\">Đó là toàn bộ những gì mình hiểu sơ lược về Object, The Global environment, The creation phase and Hoisting mà mình muốn chia sẻ trong bài viết này. Hi vọng là mình đã không hiểu sai chỗ nào. Và tin mình đi. Mình sẽ còn đào sâu những vấn đề này nhiều lần ở những bài viết sau. Hãy đi lên từ căn bản</p><p dir=\"ltr\">JavaScipt thật vi diệu phải không :)))&nbsp;</p><p dir=\"ltr\">Xin cám ơn!</p><p dir=\"ltr\">==============================================================</p><p dir=\"ltr\"><a href=\"http://spiderum.com/bai-dang/1-Nhat-ki-hoc-JavaScript-Syntax-parsers-Execution-contexts-Lexical-environments-545\" target=\"_blank\">Previous</a> | <a href=\"http://spiderum.com/bai-dang/1-Nhat-ki-hoc-JavaScript-Syntax-parsers-Execution-contexts-Lexical-environments-545\" target=\"_blank\">Contents</a> | Next</p>","cat_id":{"_id":12,"name":"Khoa học - Công nghệ"},"created_at":"2017-01-25T15:57:04.581Z","creator_id":2496,"down_point":0,"tags":[],"title":"#2 Nhật kí học JavaScript: Objects, The global environment, The Creation Phase and Hoisting","up_point":19}