{"_id":12656,"tags":[],"up_point":15,"down_point":0,"title":"[Translate] Làm thế nào để suy nghĩ như một lập trình viên – Bài học trong giải quyết vấn đề","body":"<div>Lần đầu up bài lên Spiderum, nhằm trúng hôm trang bị lỗi, sau một ngày mở ra không thấy bài đâu nữa :(.&nbsp;</div><div>Kỳ cụi up lại, bài này mình đọc trên Medium thấy khá hay. Mình có học theo và thấy hiệu quả với mình. Hy vọng cũng giúp được một số bạn.</div><div>Bài dịch còn sơ sài, mong mọi người góp ý thêm.&nbsp;</div><div><br></div><div>Nếu như bạn hứng thú với lập trình, bạn có thể đã nhìn thấy câu này trước đây</div><div><em>“Mỗi người ở đất nước này nên học để lập trình một chiếc máy tính, bởi vì việc đó dạy bạn cách suy nghĩ\" – Steve Jobs</em></div><div>Chăc hẳn bạn đang thắc mắc suy nghĩ như một lập trình viên, một cách cụ thể, có nghĩa là gì? Và làm thế nào bạn làm như vậy được?</div><div>Về bản chất, nó nói về cách giải quyết vấn đề hiệu quả hơn.</div><div>Mục tiêu của tôi trong bài này là dạy bạn cách đó.</div><div>Đến cuối bài, bạn sẽ biết chính xác các bước cần có để trở thành một người giải quyết vấn đề tốt hơn.</div><div>Tại sao điều này lại quan trọng?</div><div>Giải quyết vấn đề là một siêu kỹ năng.</div><div>Chúng ta đều có vấn đề. To và nhỏ. Cách chúng ta giải quyết chúng thỉnh thoảng khá là … ngẫu nhiên.</div><div>Trừ khi bạn có một hệ thống, dưới đây khá chắn là cách bạn “giải quyết” vấn đề (cách mà tôi làm khi tôi bắt đầu lập trình):</div><ul><li>Thử một giải pháp</li><li>Nếu giải pháp đó không hiệu quả, thử một cái khác</li><li>Nếu vẫn không hiệu quả, lặp lại bước 2 cho đến khi gặp may mắn</li></ul><div>Thi thoảng bạn cũng gặp may. Nhưng đấy là cách tệ nhất để giải quyết vấn đề. Và rất, rất lãng phí thời gian.</div><div>Cách tốt nhất bao gồm a) có một khung chương trình và b) thực hành nó.</div><div>“Hầu hết các nhà tuyển dụng ưu tiên kỹ năng giải quyết vấn đề.</div><div>Kỳ năng giải quyết vấn đề hầu như được nhất trí là phẩm chất quan trọng nhất mà các nhà tuyển dụng tìm kiếm … nhiều hơn cả sự thành thạo ngôn ngữ lập trình, sửa lỗi và thiết kế hệ thống.</div><div>Mô tả suy nghĩ điện toán hoặc khả năng chia nhỏ các vấn đề to lớn và phức tạp chỉ có giá trị như kỹ năng chuyên môn cơ bản được yêu cầu cho 1 nghề” – Hacker Rank (Báo cáo phát triển kỹ năng 2018)</div><div><strong>Có một chương trình khung</strong></div><div>Để tìm ra chương trình khung đúng, tôi làm theo lời khuyên trong cuốn sách <em>“Bếp trưởng 4 giờ”</em>của Tim Ferris.</div><div>Nó giúp tôi phỏng vấn hai người thực sự xuất sắc: C.Jordan Ball (xếp hạng 1 hoặc thứ 2 trong số hơn 65,000 người dùng trên Coderbyte) và V.Antion Spraul (tác giả của cuốn sách <em>“Suy nghĩ như một lập trình viên: giới thiệu về giải quyết vấn đề một cách sáng tạo</em>”).</div><div>Tôi hỏi họ những câu hỏi giống nhau và đoán xem? Câu trả lời của họ khá tương quan.</div><div>Nhanh thôi, các bạn sẽ biết câu trả lời của họ.</div><div>Lưu ý: điều đó không có nghĩa là họ làm mọi việc theo cùng một cách. Mỗi người đều khác biệt. Bạn cũng khác biệt. Nhưng nếu bạn khởi đầu với những nguyên tắc chúng ta đều đồng ý là tốt, bạn sẽ tiến xa hơn và nhanh hơn.</div><div><em>“Lỗi lớn nhất tôi thấy các lập trình viên mới hay mắc phải là quá chú ý vào học câu lệnh thay vì học cách giải quyết vấn đề”</em> – V.Anton Spraul</div><div>Vậy bạn nên làm gì khi gặp một vấn đề mới.</div><div>Dưới đây là các bước</div><div><strong>1. Thấu hiểu</strong></div><div>Hiểu một cách chính xác câu hỏi. Hầu hết các vấn đề khó khăn khó bởi vì bạn không hiểu chúng (điều đó giải thích vì sao đây là bước đầu tiên)</div><div>Làm thế nào để biết khi bạn hiểu một vấn đề? Khi bạn có thể giải thích nó một cách đơn giản.</div><div>Bạn có nhớ khi bạn mắc kẹt trong một vấn đề, bạn bắt đầu giải thích nó, và bạn ngay lập tức thấy lỗ hổng về mặt logic mà bạn không hề nhận ra trước đó?</div><div>Phần lớn lập trình viên hiểu cảm giác này.</div><div>Đó là lý do vì sao bạn nên viết vấn đề của mình ra, vẽ một biểu đồ, hoặc nói với ai đó (hoặc cái gì đó … một số người sử dụng một con vịt cao su).</div><div><em>“Nếu như bạn không thể giải thích cái gì đó với các từ ngữ đơn giản, bạn không hiểu nó”</em> – Richard Feynman</div><div><strong>2. Lập kế hoạch&nbsp;</strong></div><div>Đừng nhảy ngày vào giải quyết mà không có một kế hoạch (và hy vọng bằng cách nào đó bạn có thể loanh quanh mãi rồi cũng làm được). Lên kế hoạch phương án của mình.</div><div>Không gì có thể giúp bạn nếu bạn không thể viết ra các bước chính xác.</div><div>Trong lập trình, điều này có nghĩa là đừng bắt đầu xâm nhập ngay. Hãy để cho não bạn có thời gian phân tích vấn đề và xử lý thông tin.</div><div>Để có kế hoạch, hãy trả lời câu hỏi dưới đây:</div><div>“Cho đầu vào X, các bước cần thiết để có đầu ra Y là bước nào?”</div><div>Lưu ý: lập trình viên có một công cụ tuyệt vời giúp họ với câu hỏi này …. Chú giải!</div><div><strong>3. Chia nhỏ&nbsp;</strong></div><div>Tập trung chú ý. Đây là bước quan trọng nhất.</div><div>Đừng cố giải quyết cả một vấn đề to lớn. Bạn sẽ khóc đó.</div><div>Thay vào đó, hãy chia chúng thành các vấn đề nhỏ - tiểu vấn đề. Các tiểu vấn đề này dễ giải quyết hơn nhiều.</div><div>Sau đó, giải quyết các tiểu vấn đề từng cái một. Bắt đầu với cái đơn giản nhất. Đơn giản nhất có nghĩa là bạn biết câu trả lời (hoặc gần như câu trả lời).</div><div>Sau đó, đơn giản nhất có nghĩa là tiểu vấn đề được giải quyết không phải dựa trên giải quyết các vấn đề khác.</div><div>Một khi bạn giải quyết mọi tiểu vấn đề, kết nối chúng lại.</div><div>Kết nối các tiểu vấn đề sẽ đưa ra giải pháp cho vấn đề ban đầu. Chúc mừng!</div><div>Kỹ năng này là nền móng của giải quyết vấn đề. Ghi nhớ nó (đọc lại bước này, nếu bạn thấy cần thiết)</div><div><em>“Nếu như tôi có thể dạy mỗi lập trình viên mới một kỹ năng giải quyết vấn đề, nó sẽ là “kỹ năng đơn giản hóa vấn đề”.</em></div><div><em>Giả như bạn là một lập trình viên mới và bạn được yêu cầu viết một chương trình đọc 10 số và tìm ra số nào là số lớn thứ 3. Đối với một lập trình viên mới toanh, đây có thể là một phần việc khó nhằn, mặc dù nó chỉ yêu cầu các câu lệnh cơ bản.</em></div><div><em>Nếu như bạn bị mắc kẹt, bạn nên đơn giản hóa vấn đề. Thay vì tìm số lớn thứ 3, bạn nghĩ sao về tìm số lớn nhất? Vẫn khó? Thế còn tìm số lớn nhất trong 3 số? hay lớn hơn trong 2 số?</em></div><div><em>Đơn giản hóa vấn đề đến điểm mà bạn biết cách giải quyết chúng và viết ra giải pháp. Sau đó mở rộng vấn đề từ từ và viết lại giải pháp để kết nối chúng, và tiếp tục như vậy cho đến khi bạn quay trở lại điểm xuất phát\"</em>. – V. Anton Spraul</div><div><strong>4. Mắc kẹt&nbsp;</strong></div><div>Bây giờ, bạn có lẽ đang ngồi đó và nghĩ “này Richard… Điều đó tuyệt đấy, nhưng nếu như tôi bị mắc kẹt và không thể giải quyết được dù chỉ một tiểu vấn đề?”</div><div>Đầu tiên, hít một hơi thật sâu. Thứ hai, đó điều là bình thường.</div><div>Đừng lo lắng, anh bạn. Điều đó xảy ra với mọi người.</div><div>Điều khác biệt là lập trình viên/ người giải quyết vấn đề tốt nhất thường tò mò nhiều hơn bực tức khi gặp lỗi.</div><div>Thực tế, dưới đây là 3 điều nên thử khi phải đối mặt với khó khăn:</div><ul><li>Sửa lỗi: đi từng bước qua giải pháp của bạn cố gắng tìm ra chỗ sai. Lập trình viên gọi việc này là sửa lỗi</li></ul><div><em>“Nghệ thuật của sửa lỗi là tìm ra điều gì bạn thực sự yêu cầu chương trình của bạn làm hơn là điều gì bạn nghĩ là bạn yêu cầu nó làm”</em> – Andrew Singer</div><ul><li>Đánh giá lại: Lùi lại một bước. Xem xét vấn đề từ khía cạnh khác. Có điểm nào có thể chuyển sang một cách tiếp cận bao quát hơn không?</li></ul><div><em>“Thi thoảng, chúng ta lạc lối trong chi tiết của vấn đề, chúng ta không chú ý tới các nguyên tắc chung mà có thể giải quyết vấn đề ở mức độ tổng quát hơn.</em></div><div><em>Ví dụ kinh điển của vấn đề trên, đương nhiên, là tổng của một dãy dài các số nguyên liên tiếp, 1+2+3+…+n, cái mà Gauss nhanh chóng nhận ra chỉ đơn giản là n(n+1)/2, do đó tránh phải mất công làm phép cộng”</em> – C.Jordan Ball</div><div>Lưu ý: Một cách khác để đánh giá lại là bắt đầu một cái mới. Xóa mọi thứ và bắt đầy với cái nhìn tươi mới. Tôi nghiêm túc đó. Bạn sẽ sững sờ khi biết nó hiệu quả như thế nào.</div><ul><li>Nghiên cứu: ah, Google thần thánh. Bạn đọc đúng rồi đó. Không cần biết vấn đề của bạn là gì, một ai khác chắc đã xử lý nó. Tìm người đó/ giải pháp đó. Thực tế, làm cách này kể cả khi bạn đã giải quyết được vấn đề (Bạn có thể học được nhiều điều từ giải pháp của người khác).</li></ul><div>Cánh báo: Đừng tìm giải pháp cho cả vấn đề lớn. Chỉ nên tìm giải pháp cho các tiểu vấn đề. Tại sao? Bời vì trừ khi bạn vật lộn (dù chỉ là một chút), bạn sẽ không học được gì cả. Nếu bạn không học được gì, bạn đã lãng phí thời gian của bạn.</div><div><strong>5. Thực hành&nbsp;</strong></div><div>&nbsp;Đừng kỳ vọng sẽ trở nên giỏi giang chỉ trong 1 tuần. Nếu như bạn muốn trở thành một người giải quyết vấn đề tốt, giải quyết thật nhiều vấn đề!</div><div>Thực hành. Thực hành. Thực hành. Chỉ cần thời gian trước khi bạn nhận ra “vấn đề này có thể được giải quyết một cách đơn giản với <thêm nguyên tắc ở đây>”.</div><div>Làm thế nào để thực hành? Có rất nhiều lựa chọn.</div><div>Cờ vua, giải toán, Sudoku, Go, Monopoly, Trò chơi điện tử, ….</div><div>Thật ra, một khuôn mẫu chung giữa những người thành công là thói quen thực hành “giải quyết các tiểu vấn đề”. Ví dụ, Peter Thiel chơi cờ vua, và Elon Musk chơi trò chơi điện tử.</div><div><em>“Byron Reeves đã nói “nếu bạn muốn thấy lãnh đạo kinh doanh sẽ như thế nào trong 3 đến 5 năm tới, hãy xem chuyện gì đang xảy ra trong trò chơi điện tử”</em></div><div><em>Tua nhanh tới ngày nay, Elon Musk, Reid Hoffman, Mark Zuckerberg và nhiều người khác nói rằng trò chơi điện tử là nền tảng cho thành công trong việc xây dựng công ty của họ.”</em> – Mary Meeker (Báo cáo xu hướng internet 2017)</div><div>Điều đó có phải là bạn chỉ nên chơi trò chơi điện tử hay không? Không đâu.</div><div>Nhưng trò chơi điện tử là về cái gì? Đúng vậy, chính là giải quyết vấn đề!</div><div>Vậy, cái bạn nên làm là tìm cái gì đó để thực hành. Cái cho phép bạn giải quyết nhiều tiểu vấn đề (một cách lý tưởng, cái gì mà bạn thấy thích thú).</div><div>Ví dụ, tôi thích các thử thách lập trình. Mỗi ngày, tôi cố giải ít nhất một thách thức (thường trên Coderbyte).</div><div>Như tôi nói, tất cả các vấn đề đều có hình mẫu tương tự</div><div><strong>Kết luận&nbsp;</strong></div><div>Tất cả có nhiêu đó thôi các bạn!</div><div>Bây giờ, bạn đã hiểu rõ hơn “suy nghĩ như một lập trình viên” có nghĩ thế nào rồi.</div><div>Bạn cũng biết kỹ năng giải quyết vấn đề là một kỹ năng tuyệt vời để nuôi dưỡng (Siêu kỹ năng).</div><div>Nếu như thế vẫn chưa đủ, lưu ý rằng bạn luôn biết làm thế nào để thực hành kỹ năng giải quyết vấn đề.</div><div>Phù… khá ngầu ha?</div><div>Cuối cùng, tôi hy vọng các bạn sẽ gặp thật nhiều vấn đề.</div><div>Đúng như bạn đọc đó. Ít nhất bạn biết cách giải quyết chúng (và, bạn sẽ học được rằng với mỗi giải pháp, bạn sẽ tiến bộ).</div><div><em>“Ngay khi bạn nghĩ bạn thành công định vị một chướng ngại vật, cái khác sẽ xuất hiện. Nhưng đó là điều khiến cho cuộc sống thú vị.[…]</em></div><div><em>Cuộc sống là một chu trình vượt qua các chướng ngại vật – một chuỗi các phòng tuyến kiên cố mà chúng ta cần vượt qua.</em></div><div><em>Mỗi lần, bạn sẽ học được cái gì đó.</em></div><div><em>Mỗi lần, bạn sẽ phát triển sức mạnh, sự thông thái và tầm nhìn.</em></div><div><em>Mỗi lần, một chút cạnh tranh sẽ giảm xuống. Cho đến khi tất cả những gì còn lại là bạn: phiên bản tốt nhất của bạn”&nbsp;</em>– Ryan Holiday (Sự trở ngại là con đường).</div><div>Còn bây giờ, hãy đi giải quyết các vấn đề!</div><div>Và chúc bạn may mắn!</div><div><a href=\"https://medium.freecodecamp.org/how-to-think-like-a-programmer-lessons-in-problem-solving-d1d8bf1de7d2\" target=\"_blank\">https://medium.freecodecamp.org/how-to-think-like-a-programmer-lessons-in-problem-solving-d1d8bf1de7d2</a></div>","cat_id":{"_id":11,"name":"Kỹ năng"},"creator_id":13940,"created_at":"2018-04-16T02:07:01.508Z"}