{"_id":7828,"title":"CODE: 9 - Bit by Bit by Bit","body":"<div><a href=\"https://spiderum.com/bai-dang/Sach-dich-CODE-The-Hidden-Language-of-Computer-Hardware-and-Software-dang-dich-5um\" rel=\"noopener noreferrer\" target=\"_blank\">Các chương đã dịch.</a></div><div><figure class=\"fullscreen\"><img src=\"https://s3-ap-southeast-1.amazonaws.com/img.spiderum.com/sp-images/fbfb94a03a4611e7953a3b3083b694e0.jpg\" class=\"fr-fic fr-dib\"><figcaption class=\"image-description\" contenteditable=\"false\" placeholder=\"Chú thích ảnh (không bắt buộc)\"><br></figcaption></figure></div><div>Khi Tony Orlando đề nghị trong một bài hát được yêu thích vào năm 1973 \"<a href=\"https://www.youtube.com/watch?v=1BfNV-TC0vE\" rel=\"noopener noreferrer\" target=\"_blank\">Tie a Yellow Ribbon Round the Ole Oak Tree</a>\", ông sẽ không đưa ra những lời giải thích tỉ mỉ hay thảo luận gì thêm. Ông không muốn nói nhiều. Mặc dù với những phức cảm và nguồn gốc đầy xúc động đã xảy ra trong một tình huống có thật mà bài hát dựa vào, thì với cánh đàn ông tất cả những gì họ muốn chỉ là một câu trả lời có hoặc không đơn giản. Anh ta muốn một sợi ruy-băng vàng thắt quanh thân cây có nghĩa là \"Vâng, mặc dù anh đã gây ra nhiều vụ lộn xộn và đã vào tù ba năm, thì em vẫn muốn anh quay trở về dưới mái nhà này bên em\". Và muốn sự vắng mặt dải ruy-băng vàng ấy được hiểu là \"Đừng có mà <em>nghĩ&nbsp;</em>tới việc dừng lại tại đây nhá\".</div><div>Đây là hai sự thay thế rõ ràng loại trừ lẫn nhau. Tony Orlando đã <em>không&nbsp;</em>hát, \"Hãy thắt nửa sợi ruy-băng vàng nếu em vẫn còn do dự\" hay \"Thắt một dải ruy-băng xanh dương nếu em không còn yêu anh nữa nhưng vẫn muốn là bạn hiền của nhau.\" Thay vào đó, ông đã làm việc đó rất rất đơn giản.</div><div>Hiệu quả tương tự như sự có hay vắng mặt của dải ruy-băng vàng (nhưng có lẽ là sẽ khá ngượng nghịu khi đặt vào thơ) có thể là một sự lựa chọn tín hiệu giao thông trong sân trước: Có lẽ là \"Nhập làn\" hay \"Sai Làn\".</div><div>Hay một biển báo treo trên cửa: \"Đóng\" hoặc \"Mở\".</div><div>Hay một cây đèn pin trong cửa sổ, được bật hoặc tắt.</div><div>Bạn có thể chọn trong cả đống cách để nói có hay không nếu đó là tất cả những gì bạn muốn nói. Bạn không cần cả một câu để nói có hay không; bạn không cần một từ và cũng chẳng cần lấy một chữ. Những gì bạn cần là một <em>bit</em>, và tôi nói vậy có nghĩa là mọi thứ bạn cần chỉ là 0 và 1.</div><div>Như ta đã tìm hiểu trong các chương trước, chẳng có gì là đặc biệt với hệ thập phân mà ta thường dùng để tính toán cả. Khá rõ ràng là chúng ta tạo ra hệ chữ số dựa trên mười bởi vì đó là số ngón tay mà ta có. Cũng có thể hệ số của ta sẽ dựa trên tám (nếu chúng ta là các nhân vật hoạt hình) hoặc bốn (nếu ta là tôm hùm) hay thậm chí là hai (nếu ta là cá heo).</div><div>Nhưng lại <em>có&nbsp;</em>vài thứ đặc biệt về hệ số nhị phân đấy. Đặc biệt ở chỗ nó là hệ số <em>đơn giản nhất</em> có thể có. Chỉ có duy nhất hai chữ số nhị phân - 0 và 1. Nếu ta muốn thứ gì đó đơn giản hơn, ta phải bỏ đi số 1, và khi đó chỉ còn lại mỗi số 0. Mà ta chẳng làm được gì nhiều với mình nó cả.</div><div>Từ <em>bit</em>, đặt ra có nghĩa là <em>binary digit</em>, chắc chắn là một trong những từ dễ thương nhất đã được phát minh trong mối liên quan với máy tính. Tất nhiên, từ đó mang một nghĩa bình thường, \"một khoảng, đơn vị, độ nhỏ\", và cái nghĩa thông thường ấy hoàn hảo là bởi một bit - một con số nhị phân - thật ra là một lượng rất nhỏ.</div><div>Lắm lúc khi một từ mới được tạo ra, nó cũng mang một nghĩa mới. Và điều đó chắc chắn đúng trong trường hợp này. <em>Bit&nbsp;</em>có một nghĩa vượt trên <em>binary digit</em> mà cá heo dùng để đếm. Trong thời đại máy tính, bit được xem như là <em>khối cấu trúc cơ bản của thông tin</em>.</div><div>Giờ thì đó là một lời tuyên bố táo bạo, và tất nhiên, các bit không phải là thứ duy nhất truyền thông tin. Chữ cái, từ ngữ, mã Morse, mã Braille và các chữ số thập phân cũng chuyên chở thông tin được vậy. Còn với bit, nó truyền tải một lượng thông tin rất <em>nhỏ</em>. Một bit thông tin là một lượng thông tin nhỏ nhất có thể. Bất kể thứ gì ít hơn một bit thì không mang chút thông tin nào cả. Nhưng vì một bit đại diện cho một lượng thông tin nhỏ nhất có thể, nên những thông tin phức tạp hơn có thể được truyền đi với nhiều bit hơn. (Khi nói một bit truyền đi một lượng \"nhỏ\" thông tin, hẳn là tôi không có ý xem thông tin giáp với sự không quan trọng. Thật ra, dải ruy-băng vàng là một bit rất quan trọng với hai người quan tâm đến nó.)</div><div>Henry Wadsworth Longfellow đã viết \"Listen, my children, and you shall hear / Of the midnight ride of Paul Revere\" và trong khi ông ta có thể không chính xác về mặt lịch sử khi miêu tả cách mà Paul Revere đã báo hiệu cho người Mỹ về sự xâm lược của Anh, ông đã cung cấp một ví dụ đáng để suy ngẫm về việc sử dụng các bit để truyền đạt thông tin quan trọng:</div><div style=\"text-align: center;\"><em>He said to his friend \"If the British march<br>By land or sea from the town to-night,<br>Hang a lantern aloft in the belfry arch<br>Of the North Church tower as a special light,-<br>One, if by land, and two, if by sea...\"</em></div><div style=\"text-align: center;\"><em>Anh ta nhắn đám bạn mình<br>Nếu đêm tụi Anh điều binh từ&nbsp;thành<br>Vượt rừng băng biển chẳng lành<br>Thì treo ngọn đèn trong vành tháp chuông<br>Trên nhà thờ bắc theo khuôn -<br>Một cho đi bộ đi xuồng thì hai...\"</em></div><div style=\"text-align: center;\"><strong>Nông nỗi quá dịch luôn thơ chơi :D</strong></div><div>Tóm gọn lại, cậu bạn của Paul Revere có hai cái đèn lồng. Nếu lính Anh xâm lược bằng đường bộ, thì cậu ta chỉ đặt một cái đèn vào trong tòa tháp nhà thờ. Nếu lính Anh đi đường biển, thì cậu ta sẽ đặt luôn hai cái.</div><div>Tuy nhiên, Longfellow không công khai nhắc đến tất cả các tình huống có thể xảy ra. Ông để ngỏ khả năng <em>thứ ba</em>, đó là lính Anh vẫn chưa xâm chiếm. Longfellow ngầm hiểu là trường hợp này sẽ được truyền tin bằng sự <em>vắng mặt</em> các ngọn đèn trong thành nhà thờ.</div><div>Hãy giả sử rằng hai cái đèn lồng thực tế được gắn vĩnh viễn vào trong tòa tháp nhà thờ. Những lúc bình thường thì chúng không được thắp sáng:<figure class=\"aligncenter\"><img src=\"https://s3-ap-southeast-1.amazonaws.com/img.spiderum.com/sp-images/59f29dc03a4b11e7953a3b3083b694e0.png\" class=\"fr-fic fr-dib\"><figcaption class=\"image-description\" contenteditable=\"false\" placeholder=\"Chú thích ảnh (không bắt buộc)\"><br></figcaption></figure></div><div>Điều đó có nghĩa là lính Anh vẫn chưa xâm lược. Nếu một trong các ngọn đèn được thắp thì,<figure class=\"aligncenter\"><img src=\"https://s3-ap-southeast-1.amazonaws.com/img.spiderum.com/sp-images/64df3f403a4b11e7953a3b3083b694e0.png\" class=\"fr-fic fr-dib\"><figcaption class=\"image-description\" contenteditable=\"false\" placeholder=\"Chú thích ảnh (không bắt buộc)\"><br></figcaption></figure><div>hay<figure class=\"aligncenter\"><img src=\"https://s3-ap-southeast-1.amazonaws.com/img.spiderum.com/sp-images/74b9eeb03a4b11e7953a3b3083b694e0.png\" class=\"fr-fic fr-dib\"><figcaption class=\"image-description\" contenteditable=\"false\" placeholder=\"Chú thích ảnh (không bắt buộc)\"><br></figcaption></figure></div><div><br></div></div><div>lính Anh đang đến bằng đường bộ. Nếu cả hai đèn đều được thắp sáng,<figure class=\"aligncenter\"><img src=\"https://s3-ap-southeast-1.amazonaws.com/img.spiderum.com/sp-images/7b7df5203a4b11e7953a3b3083b694e0.png\" class=\"fr-fic fr-dib\"><figcaption class=\"image-description\" contenteditable=\"false\" placeholder=\"Chú thích ảnh (không bắt buộc)\"><br></figcaption></figure></div><div>thì lính Anh đến bằng đường biển.</div><div>Mỗi chiếc đèn là một bit. Một cái được được thắp sáng là bit 1 và không được thắp sáng là bit 0. Tony Orlando đã chứng minh cho chúng ta thấy là chỉ cần một bit là đã có thể truyền đi một trong hai tình huống có thể có. Nếu Paul Revere chỉ cần báo động rằng lính Anh đang đến (và không biết đi bằng đường nào hết), thì một cái đèn thôi đã đủ rồi. Đèn sẽ được thắp sáng cho một cuộc xâm lăng và không thắp cho một đêm bình yên khác.</div><div>Truyền đi một trong ba tình huống thì cần phải có thêm một cái đèn khác. Một khi đèn thứ hai hiện diện, tuy nhiên, với hai bit lại có thể truyền đi một trong bốn trường hợp:</div><div>00 = Anh sẽ không chiếm đánh tối nay.<br>01= Chúng đến bằng đường bộ.<br>10 = Chúng đến bằng đường bộ.<br>11 = Chúng đến bằng đường thủy.</div><div>Những gì Paul Revere đã làm bằng việc chỉ ra chỉ ba trường hợp thì thực ra là khá ranh. Trong ngôn ngữ của thuyết truyền tin, ông dùng từ <em>redundancy (thừa)</em> để xóa bỏ ảnh hưởng của từ <em>noise (nhiễu)</em>. Từ <em>nhiễu</em> được dùng trong lý thuyết giao tiếp để ám chỉ bất cứ thứ gì can thiệp sự truyền tin. Tính tĩnh trên đường dây điện thoại là một ví dụ rõ ràng về việc nhiễu can thiệp vào các cuộc trò chuyện điện thoại. Truyền tin thông qua điện thoại thường thì đều thành công, còn không thì là do ảnh hưởng của nhiễu bởi vì ngôn ngữ nói rườm rà cực kì. Chúng ta không cần phải nghe mọi âm tiết của một từ để mà hiểu hết những gì được nói ra.</div><div>Với trường hợp đèn trong tháp nhà thờ, nhiễu có thể ám chỉ đến bóng tối của đêm và khoảng cách tới Paul Revere từ tòa tháp, cả hai có thể làm cản trở anh ta phân biệt cái đèn này với cái đèn kìa. Đây là đoạn trọng yếu trong bài thơ của Longfellow:</div><div style=\"text-align: center;\"><em>And lo! As he looks, on the belfry's height<br>A glimmer, and then a gleam of light!<br>He springs to the saddle, the bridle he turns,<br>But lingers and gazes, till full on his sight<br>A second lamp in the belfry burns!</em></div><div style=\"text-align: center;\"><em>Xem kìa! Trên tháp chuông cao</em><br><em>Lập lòe ánh sáng</em><em>&nbsp;làm chao lòng người&nbsp;</em><br><em>@#$%^%$#</em><br></div><div>Chắc chắn không có vẻ như là Paul Revere đang ở vị trí thuận tiện để nhận ra chính xác cái đèn nào được thắp sáng trước.</div><div>Khái niệm cơ bản ở đây là <em>thông tin đại diện cho một sự lựa chọn giữa hai hoặc nhiều lựa chọn có thể có hơn</em>. Ví dụ, Khi chúng ta nói với người khác, mọi từ mà ta nói là một sự lựa chọn giữa tất cả các từ có trong từ điển. Nếu chúng ta đếm tất cả các từ trong từ điển từ 1 tới 351.482, thì ta đúng ra ta có thể mang vào các cuộc trò chuyện chính xác các số thay cho những chữ đó. (Tất nhiên, cả hai người nói chuyện đều cần từ điển mà các từ được đánh số sẵn, nếu có đủ kiên nhẫn).</div><div>Một khía cạnh khác là <em>b</em><em>ất kỳ thông tin nào mà có thể giảm đi thành một lựa chọn trong hai hoặc nhiều hơn những khả năng có thể có được diễn tả bằng cách sử dụng bit</em>. Không cần phải nói, có rất nhiều dạng giao tiếp của con người mà <em>không&nbsp;</em>cần phải đại diện cho các sự lựa chọn trong các khả năng riêng lẻ và chúng cũng quan trọng cho sự tồn tại của chúng ta. Đây là lý do tại vớsao con người không hình thành các mối quan hệ lãng mạn với máy tính. (Dù gì thì cũng hãy hy vọng rằng bọn họ sẽ không như vậy). Nếu bạn không thể diễn tả thứ gì đó bằng từ ngữ, hình ảnh hay âm thanh, bạn sẽ không có khả năng mã hóa các thông tin thành các bit. Cho dù bạn muốn như vậy.</div><div>Ngón cái chỉ lên hay chỉ xuống là một bit thông tin. Và hai ngón cái chỉ lên hoặc chỉ xuống - như là các ngón cái của các nhà phê bình phim Roger Ebert và sau này là Gene Siskel khi họ đưa ra các nhận định cuối cùng về các bộ phim mới nhất - truyền đi hai bit thông tin. (Chúng ta sẽ bỏ qua những gì họ thực sự nói về các bộ phim; những gì chúng ta quan tâm ở đây là các ngón cái của họ). Ở đây ta có bốn khả năng có thể đại diện bởi một nhóm các bit:</div><div>00 = Bọn họ đều ghét nó.<br>01 = Siskel ghét nó; Ebert thích nó.<br>10 = Siskel thích nó; Ebert ghét nó.<br>11 = Bọn họ đều thích nó.</div><div>Bit đầu tiên là bit Siskel, là 0 nếu Siskel ghét bộ phim và là 1 nếu ông ta thích nó. Tương tự, bit thứ hai là bit Ebert.</div><div>Thế nên nếu cậu bạn của bạn có hỏi, \"Siskel và Ebert nhận xét gì về bộ phim <em>Impolite Encounter</em>?\" thay vì trả lời, \"Siskel cho nó ngón cái chỉ lên và Ebert cho nó ngón cái chỉ xuống\" hay thậm chí \"Siskel thích nó Ebert thì không\" bạn có thể đơn giản chỉ nói\" Một không\". Chỉ khi nào bạn của bạn biết cái nào là bit Siskel và cái nào là bit Ebert, và bit 1 nghĩa là thích bit 0 nghĩa là không thích, thì câu trả lời của bạn mới hoàn toàn dễ hiểu. Nhưng bạn và cậu bạn phải biết về mã.</div><div>Ta có thể khai báo trước rằng bit 1 mang nghĩa là không thích và bit 0 có nghĩa là thích. Điều đó có vẻ như là ngược đời. Lẽ thường, chúng ta thích nghĩ về 1 như là đại diện cho thứ gì đó có vẻ khẳng định và ngược lại cho 0, nhưng nó chỉ là một phép gán tùy hứng thôi. Yêu cầu duy nhất là mọi người dùng mã phải biết các bit 1 và 0 mang nghĩa gì.</div><div>Ý nghĩa của một bit cụ thể hay một nhóm các bit luôn luôn được hiểu theo ngữ cảnh. Ý nghĩa của dải ruy-băng vàng quấn quanh một cây sồi cụ thể có thể chỉ được biết với một người đã đặt nó ở đó và người được cho là sẽ thấy nó. Thay đổi màu sắc, cây hay ngày và chiếc khăn sẽ chỉ là một miếng vải vô nghĩa. Tương tự, để có một vài thông tin hữu ích từ cử chỉ của Siskel và Ebert, ít nhất chúng ta cần biết bộ phim nào được bàn luận.</div><div>Nếu bạn duy trì một danh sách các bộ phim mà Siskel và Ebert đã nhận xét và cách mà họ bình chọn với các ngọn cái của họ, bạn có thể thêm một bit khác để trộn thêm ý kiến của chính mình. Thêm một bit thứ ba làm tăng con số các khả năng khác nhau lên tám:</div><div>000 = Siskel ghét nó; Ebert ghét nó; Tôi ghét nó.<br>001 =&nbsp;Siskel ghét nó; Ebert ghét nó;&nbsp;Tôi thích nó.<br>010 =&nbsp;Siskel ghét nó; Ebert thích nó;&nbsp;Tôi ghét nó.<br>011 =&nbsp;Siskel ghét nó;&nbsp;Ebert thích nó;&nbsp;Tôi thích nó.<br>100 =&nbsp;Siskel thích nó; Ebert ghét nó;&nbsp;Tôi ghét nó.<br>101 =&nbsp;Siskel thích nó;&nbsp;Ebert ghét nó;&nbsp;Tôi thích nó.<br>110 =&nbsp;Siskel thích nó;&nbsp;Ebert thích nó;&nbsp;Tôi ghét nó.<br>111 = Siskel thích nó;&nbsp;Ebert thích nó;&nbsp;Tôi thích nó.</div><div>Một điểm cộng của việc dùng các bit đại diện cho thông tin này là chúng ta biết rằng chúng ta tính được các khả năng có thể có. Chúng ta biết có thể có tám và chỉ tám khả năng và không thêm bớt gì cả. Với 3 bit, chúng ta chỉ có thể đếm từ không tới bảy. Không có thêm các số nhị phân 3 chữ số nào nữa cả.</div><div>Nào, trong suốt bảng mô tả về các bit của Siskel và Ebert, bạn có thể sẽ đặt một câu hỏi rất nghiêm trọng và đáng ngại, và câu hỏi đó là: Chúng ta làm gì với <em>Leonard Maltin's Movie & Video Guide</em>? Sau cùng, Leonard Maltin không đưa ngón cái lên hay xuống. Leonard Maltin xếp hạng các cuốn phim bằng việc dùng hệ thống ngôi sao truyền &nbsp;thống hơn.</div><div>Để xác định bao nhiêu bit mà Maltin cần, chúng ta trước hết phải biết một ít về hệ thống của ông. Maltin cho một cuộn phim bất kì từ 1 tới 4 sao, với nửa sao ở giữa. (Để làm nó thú vị hơn, ông thật ra không chấm một sao; thay vào đó cuốn phim được xếp hạng là BOMB.) Có bảy khả năng, điều đó có nghĩa là ta có thể đại &nbsp;diện một mức xếp loại bằng việc dùng chỉ 3 bit:</div><div>000 = BOMB<br>001 = *1/2<br>010 = **<br>011 = **1/2<br>100 = ***<br>101 = ***1/2<br>110 = ****</div><div>\"Còn 111 thì sao?\" bạn có thể sẽ hỏi vậy. Chà, mã này chẳng có nghĩa gì cả. Nó không được định nghĩa. Nếu mã nhị phân 111 được dùng để đại diện cho xếp hạng của Maltin, bạn sẽ biết rằng đó là một lỗi. (Có lẽ là máy tính gây ra lỗi chứ con người có bao giờ có lỗi đâu.)</div><div>Bạn sẽ nhớ lại rằng khi chúng ta có hai bit đại diện cho xếp hạng Siskel và Ebert, bit bên trái là bit Siskel và bit bên phải là bit Ebert. Các bit riêng lẽ có phải mang một nghĩa nào đó ở đây không? Chà, cũng phần nào đấy. Nếu bạn lấy giá trị của mã bit, cộng thêm 2 và chia cho 2, nó sẽ cho bạn số lượng các sao. Nhưng đó chỉ là vì chúng ta định nghĩa các mã theo một cách hợp lý và có quy tắc. Chúng ta cũng có thể định nghĩa các mã theo cách này:</div><div>000 = ***<br>001 = *1/2<br>010 = **1/2<br>011 = ****<br>101 = ***1/2<br>110 = **<br>111 = BOMB</div><div>Mã này cũng hợp lý như mã trên chừng nào mọi người đều biết ý nghĩa của nó.</div><div>Nếu Maltin có bắt gặp một bộ phim nào còn tệ hơn mức một sao, ông ta có thể cho nó nửa sao. Ông chắc chắn sẽ có đủ mã cho lựa chọn nửa sao. Mã có thể được định nghĩa như sau:</div><div>000 = MAJOR BOMB<br>001 = BOMB<br>010 = *1/2<br>011 = **<br>100 = **1/2<br>101 = ***<br>110 = ***1/2<br>111 = ****</div><div>Nhưng nếu sau đó ông còn gặp thêm một bộ phim còn chả đáng được nửa sao và quyết định cho nó không sao (ATOMIC BOMB?), ông cần thêm một bit khác nữa. Hết mã 3-bit để mà dùng rồi.</div><div>Tạp chí <em>Entertainment Weekly</em> cho theo thứ bậc, không chỉ cho các cuốn phim mà còn cho các chương trình truyền hình, đĩa CD, sách, CD-ROM, các trang web, và nhiều thứ khác nữa. Khoảng thứ bậc từ A+ trở xuống F (mặc dù có vẻ như chỉ có các cuốn phim của Pauly Shore mới đáng nhận vinh dự này). Nếu bạn đếm chúng, bạn thấy rằng có 13 thứ bậc khả thi. Chúng ta sẽ cần 4 bit để đại diện cho các bậc này:</div><div>0000 = F<br>0001 = D-<br>0010 = D<br>0011 = D+<br>0100 = C-<br>0101 = C<br>0110 = C+<br>0111 = B-<br>1000 = B<br>1001 = B+<br>1010 = A-<br>1011 = A<br>1100 = A+</div><div>Chúng ta còn ba mã chưa được dùng: 1101, 1110 và 1111, cho tổng cộng 16 mã.</div><div>Cứ khi nào ta nói về các bit, chúng ta thường nói về một <em>số</em> bit cụ thể. Ta càng có nhiều bit, thì chúng ta càng có thể truyền tải được một lượng lớn hơn các trường hợp.</div><div>Cũng tương tự với hệ thập phân, tất nhiên rồi. Ví dụ, có bao nhiêu mã vùng điện thoại? Mã vùng là con số có ba chữ số thập phân, và nếu tất cả chúng đều được dùng (mà thật ra là không, nhưng ta cứ cho qua đi), thì có 10^3, hay 1000 mã, từ 000 tới 999. Có bao nhiêu số điện thoại 7 chữ số có thể có với mã vùng 212? Đó là 10^7, hay 10.000.000. Có bao nhiêu số điện thoại mà bạn có thể có được với mã vùng 212 và đầu số 260? Đó là 10^4, hay 10.000.</div><div>Tương tự như vậy, trong hệ nhị phân số các mã khả thi thì luôn luôn bằng với 2 lũy thừa số lượng các bit:</div><div style=\"text-align: center;\"><strong>Số bit &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Số mã</strong><br>&nbsp; &nbsp; 1 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;2^1 = 2<br>&nbsp; &nbsp; 2 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;2^2 = 4<br>&nbsp; &nbsp; 3 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;2^3 = 8<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 4 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;2^4 = 16 &nbsp; &nbsp;<br>&nbsp; &nbsp; &nbsp; 5 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;2^5 = 32<br>&nbsp; &nbsp; &nbsp; 6 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;2^6 = 64<br>&nbsp; &nbsp; &nbsp; &nbsp; 7 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;2^7 = 128<br>&nbsp; &nbsp; &nbsp; &nbsp; 8 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;2^8 = 256<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 9 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;2^9 = 512 &nbsp;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 10 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;2^10 = 1024</div><div>Cứ thêm một bit thì sẽ có gấp đôi mã.</div><div>Nếu bạn biết bạn cần phải có một lượng mã cụ thể, thì bạn sẽ phải tính số bit cần dùng như thế nào? Hay nói cách khác, làm sao để bạn làm ngược lại với bảng trên?</div><div>Phương pháp bạn dùng sẽ là <em>logarit cơ số 2</em>. Phép logarit đi ngược lại với phép lũy thừa. Chúng ta biết rằng 2 lũy thừa 7 bằng 128. Và log cơ số 2 của 128 thì bằng 7. Để dùng ký hiệu toán học thì ta có:</div><div>2^7 = 128</div><div>tương đương với</div><div>log(2)128 = 7</div><div>Vậy nếu log cơ số 2 của 128 bằng 7 và log cơ số 2 của 256 bằng 8, thì log cơ số 2 của 200 là bao nhiêu? Thật ra là vào khoảng 7,64, nhưng chúng ta thực sự không cần phải biết điều này. Nếu chúng ta cần đại diện 200 thứ khác nhau bằng các bit thì ta sẽ cần 8 bit.</div><div>Các bit thường được che dấu trước các quan sát thông thường ẩn sâu trong các dụng cụ điện. Chúng ta không thể thấy các bit được mã hóa trong các đĩa cứng hay trong các đồng hồ điện tử hay trong máy tính. Nhưng đôi khi các bit lại để lộ rõ ràng cho những cặp mắt trần tục.</div><div>Dưới đây là một ví dụ. Nếu bạn sở hữu cuộn phim 35-milimet, thì hãy nhìn vào cuộn phim xem. Giữ nó như thế này:<figure class=\"aligncenter\"><img src=\"https://s3-ap-southeast-1.amazonaws.com/img.spiderum.com/sp-images/eac94d603aa711e7953a3b3083b694e0.png\" class=\"fr-fic fr-dib\"><figcaption class=\"image-description\" contenteditable=\"false\" placeholder=\"Chú thích ảnh (không bắt buộc)\"><br></figcaption></figure></div><div>Bạn sẽ thấy một lưới như bàn cờ với các ô vuông bạc và đen mà tôi đã đánh số từ 1 tới 12 như trong sơ đồ. Cái này được gọi là <em>DX-encoding</em>. 12 ô vuông này thực tế là 12 bit. Một ô vuông bạc nghĩa là bit 1 và ô vuông đen là bit 0. Ô 1 và ô 7 luôn luôn là bạc (1).</div><div>Các bit này ẩn chứa ý nghĩa gì bên trong chúng? bạn có thể nhận thấy một vài cuộn film nhạy với ánh sáng hơn các cuộn khác. Tính nhạy sáng thì thường được gọi là <em>tốc độ (speed)</em> phim. Một cuốn phim mà rất nhạy với ánh sáng được nói là <em>nhanh (fast)&nbsp;</em>bởi vì chúng có thể được phơi sáng rất nhanh. Tốc độ của cuộn phim được biểu thị bởi xếp hạng ASA (American Standards Association), phổ biến nhất là 100, 200 và 400. Xếp hạng ASA này không chỉ được in trên vỏ hộp và cát-xét mà còn được mã hóa thành các bit.</div><div>Có 24 xếp hạng ASA tiêu chuẩn cho phim ảnh. Chúng đây:<figure class=\"aligncenter\"><img src=\"https://s3-ap-southeast-1.amazonaws.com/img.spiderum.com/sp-images/c537e1a03aa811e7953a3b3083b694e0.png\" class=\"fr-fic fr-dib\"><figcaption class=\"image-description\" contenteditable=\"false\" placeholder=\"Chú thích ảnh (không bắt buộc)\"><br></figcaption></figure></div><div>Có bao nhiêu bit được yêu cầu để mã hóa thành xếp hạng ASA? Câu trả lời là 5. Chúng ta biết rằng 2^4 bằng 16, vậy nên sẽ ít quá. Nhưng 2^5 bằng 322, lại hợp lý hơn.</div><div>Các bit tương ứng với tốc độ phim được bày ra trong bảng sau:<figure class=\"aligncenter\"><img src=\"https://s3-ap-southeast-1.amazonaws.com/img.spiderum.com/sp-images/03533c003aa911e7953a3b3083b694e0.png\" class=\"fr-fic fr-dib\"><figcaption class=\"image-description\" contenteditable=\"false\" placeholder=\"Chú thích ảnh (không bắt buộc)\">Theo thứ tự: Square2, square3, square4, square5, square6, speed.</figcaption></figure></div><div>Đa &nbsp;phần các máy ảnh hiện đại 35-miimet dùng các mã này. (Ngoại trừ các máy &nbsp;ảnh mà trên đó bạn phải cài đặt độ phơi sáng bằng tay và các máy ảnh có &nbsp;máy đo ánh sáng sẵn nhưng yêu cầu bạn thiết lập tốc độ phim bằng tay.) &nbsp;Nếu bạn nhìn vào bên trong máy ảnh nơi đặt các cuộn phim, bạn sẽ thấy sáu chỗ tiếp xúc bằng kim loại tương ứng với các ô vuông từ 1 tới 6 trên hộp phim. Các ô bạc thực tế là các cát-xét phim kim loại, đóng vai trò là chất dẫn. Các ô đen là thuốc màu, đóng vai trò là chất cách điện.</div><div>Mạch điện trong máy ảnh chạy một dòng điện qua ô vuông 1, cái luôn là bạc. Dòng điện này sẽ bị lấy đi (hoặc không) bởi năm điểm tiếp xúc trên ô 2 tới ô 6, phụ thuộc vào việc các ô vuông được tráng bạc hay được phết màu lên. Do đó, nếu máy ảnh có một dòng điện đi qua ô 4 và 5 mà không qua 2, 3 và 6 cuốn phim sẽ là 400 ASA. Máy ảnh có thể điều chỉnh độ phơi sáng của cuốn phim sao cho phù hợp.</div><div>Các máy ảnh không đắt lắm chỉ cần phải đọc ô 2 và 3 và giả định rằng tốc độ phim là 50, 100, 200 hay 400 ASA.</div><div>Đa số các máy ảnh không đọc hay dùng các ô từ 8 tới 12. Các ô 8, 9 và 10 mã hóa con số phơi sáng trên cuộn phim, và các ô 11 và 12 ám chỉ tới <em>miền phơi sáng</em>, dựa trên việc cuộn phim dành cho các bản in trắng đen, cho in màu hay cho các trình chiếu màu.</div><div>Có lẽ sự hiển thị rõ ràng phổ biến nhất của các con số nhị phân là Universal Product Code (UPC) được dùng rộng rãi, ký tự dải mã nhỏ xíu xuất hiện trên mỗi bao bì sản phẩm chúng ta mua hằng ngày. UPC đến để biểu tượng hóa một trong các cách mà máy tính đã xâm nhập vào đời sống chúng ta.</div><div>Mặc dù UPC thường gây ra những cơn hoang tưởng, nó thật ra là một thứ nhỏ bé ngây thơ, được phát minh cho mục đích quét hàng tự động &nbsp;và kiểm kê, mà nó thực hiện khá thành công. Khi được dùng với một &nbsp;hệ thống quét mã được thiết kế tốt, khách hàng có thể có một hóa đơn mua hàng, mà không thể có với các máy tính tiền thông thường.</div><div>Điều thú vị với chúng ta ở đây là UPC là mã nhị phân, mặc dù mới nhìn vào thì không giống lắm. Thế nên ta cần phải học để giải mã UPC và kiểm tra cách hoạt động của nó.</div><div>Trong hầu hết các dạng thông thường, UPC là một tập hợp của 30 sọc đen thẳng đứng với nhiều kích cỡ bề rộng, được chia tách bởi các khoảng trống có bề rộng khác nhau, kèm theo vài con số. Ví dụ, đây là UPC xuất hiện trên lon Campell's Chicken Noodle Soup 10 &nbsp;3/4-ounce:<figure class=\"aligncenter\"><img src=\"https://s3-ap-southeast-1.amazonaws.com/img.spiderum.com/sp-images/a10e74e03aaa11e7953a3b3083b694e0.png\" class=\"fr-fic fr-dib\"><figcaption class=\"image-description\" contenteditable=\"false\" placeholder=\"Chú thích ảnh (không bắt buộc)\"><br></figcaption></figure></div><div>Chúng ta sẽ thử cố dịch rõ ràng UPC theo các khái niệm vạch ốm và vạch đen, khoảng trống hẹp và rộng, và thật ra đó là một cách để xem xét nó. Vạch đen trong UPC có thể có bốn bề rộng khác nhau, với vạch dày hơn là hai, ba hay 4 lần bề rộng của vạch mỏng nhất. Tương tự, khoảng rộng hơn giữa các vạch là hai, ba hay bốn lần bề rộng của khoảng ngắn nhất.</div><div>Thế nhưng vẫn còn một cách khác để nhìn nhận UPC là xem chúng như một dãy các bit. Nhớ trong đầu là hết cả cái ký hiệu mã dạng vạch này không chính xác là những gì mà đũa quét \"nhìn thấy\" tại quầy thanh toán. Chiếc đũa phép không cố để dịch các con số ở dưới đáy, ví dụ, bởi vì sẽ cần phải có một công nghệ máy tính tinh vi hơn được biết tới là <em>máy nhận dạng các ký tự quang học (optical character recognition)</em>, &nbsp;hay OCR. Thay vào đó, máy quét nhìn thấy chỉ là một lát cắt mỏng của cả khối này. UPC to cỡ đó là để nhân viên thanh toán dễ đưa vào máy quét hơn, bởi vì nó to mà. Lát cắt mà máy quét nhìn thấy có thể được biểu thị &nbsp;như thế này:<figure class=\"aligncenter\"><img src=\"https://s3-ap-southeast-1.amazonaws.com/img.spiderum.com/sp-images/b34dd2d03aab11e7953a3b3083b694e0.png\" class=\"fr-fic fr-dib\"><figcaption class=\"image-description\" contenteditable=\"false\" placeholder=\"Chú thích ảnh (không bắt buộc)\"><br></figcaption></figure></div><div>Trông gần giống với mã Morse, phải không?</div><div>Khi máy tính quét thông tin này từ trái qua phải, nó gán bit 1 cho vạch đen đầu tiên nó gặp, bit 0 cho khoảng trống tiếp theo. Chuỗi các khoảng trống và vạch được đọc như là một dãy các bit 1, 2, 3 hay 4 trong một hàng, dựa trên chiều rộng của khoảng trống hay vạch. Các bit tương ứng với mã vạch được quét thành trông khá đơn giản:<figure class=\"aligncenter\"><img src=\"https://s3-ap-southeast-1.amazonaws.com/img.spiderum.com/sp-images/f39e83c03aab11e7953a3b3083b694e0.png\" class=\"fr-fic fr-dib\"><figcaption class=\"image-description\" contenteditable=\"false\" placeholder=\"Chú thích ảnh (không bắt buộc)\"><br></figcaption></figure></div><div>Cho nên cả đoạn mã vạch UPC đơn giản chỉ là một chuỗi 95 bit mà thôi. Trong ví dụ cụ thể &nbsp;này, các bit có thể được nhóm lại như sau:<figure class=\"aligncenter\"><img src=\"https://s3-ap-southeast-1.amazonaws.com/img.spiderum.com/sp-images/0c5a26303aac11e7953a3b3083b694e0.png\" class=\"fr-fic fr-dib\"><figcaption class=\"image-description\" contenteditable=\"false\" placeholder=\"Chú thích ảnh (không bắt buộc)\"><br></figcaption></figure></div><div>3 bit đầu luôn luôn là 101. Đây được gọi là <em>mẫu hình bảo vệ cánh trái</em>, &nbsp;và nó cho phép thiết bị quét vi tính có thể nhắm đúng được đối tượng. Từ mẫu bảo vệ, máy quét có thể xác định độ dài mã các vạch và khoảng trống mà chúng tương ứng với một bit riêng lẻ. Trái lại, mã UPC phải là một cỡ cụ thể trên tất cả các gói hàng.</div><div>Mẫu hình bảo vệ cánh trái được theo sau bởi sáu nhóm các 7 bit. Mỗi chúng là một mã cho một con số từ 0 tới 9, như tôi vừa mới thử trước đó. Một mẫu hình bảo vệ trung tâm 5-bit đi theo sau. Sự xuất hiện của mẫu cố định này (luôn là 01010) là một dạng kiểm tra lỗi đi kèm. Nếu máy quét vi tính không tìm thấy mã bảo vệ trung tâm nơi mà lẽ ra sẽ có, nó sẽ không chấp nhận mã này là mã UPC. Mẫu hình bảo vệ trung tâm này là một trong một vài các đề phòng cho mã giả mạo hay được in quá tệ.</div><div>Mẫu hình bảo vệ trung tâm được theo sau bởi sáu nhóm mỗi 7 bit, mà tiếp sau nó là một mẫu hình bảo vệ cánh phải, luôn luôn là 101. Như tôi sẽ giải thích kỹ hơn, sự hiện diện của mẫu hình bảo vệ tại khúc cuối cho phép mã UPC được quét ngược (có nghĩa là, từ phải qua trái) cũng như xuôi.</div><div>Vậy nên toàn bộ UPC được mã hóa thành 12 số. Bên trái UPC mã hóa 6 số, mỗi con yêu cầu 7 bit. Bạn có thể dùng bảng sau để mã hóa những bit này:<figure class=\"aligncenter\"><img src=\"https://s3-ap-southeast-1.amazonaws.com/img.spiderum.com/sp-images/e1cd3f003aac11e7953a3b3083b694e0.png\" class=\"fr-fic fr-dib\"><figcaption class=\"image-description\" contenteditable=\"false\" placeholder=\"Chú thích ảnh (không bắt buộc)\"><br></figcaption></figure></div><div>Để ý là mỗi mã 7-bit bắt đầu với một số 0 và kết thúc với một số 1. Nếu máy quét gặp một mã 7-bit bên trái mà bắt đầu bằng 1 hay kết thúc bằng 0, thì nó biết rẳng có thể là nó đã không đọc đúng mã UPC hoặc mã đã bị làm giả. Cũng nên để ý là mỗi mã chỉ có hai nhóm bit 1 liên tiếp. Điều này ngầm hiểu là mỗi con số tương ứng với 2 vạch dọc trong mã UPC.</div><div>Bạn sẽ nhận thấy rằng mỗi mã trong &nbsp;bảng này có một số lẻ các bit 1. Đây là một dạng kiểm lỗi và tính thống nhất khác được biết là <em>parity (tính chẵn lẻ)</em>. &nbsp;Một nhóm các bit có tính chẵn nếu nó có một số chẵn các bit 1 và tính lẻ nếu nó có một số lẻ các bit 1. Do đó, tất cả các mã này có tính lẻ.</div><div>Để lý giải sáu mã 7-bit bên phải mã UPC, dùng bảng sau:<figure class=\"aligncenter\"><img src=\"https://s3-ap-southeast-1.amazonaws.com/img.spiderum.com/sp-images/4a31f2703aad11e7953a3b3083b694e0.png\" class=\"fr-fic fr-dib\"><figcaption class=\"image-description\" contenteditable=\"false\" placeholder=\"Chú thích ảnh (không bắt buộc)\"><br></figcaption></figure></div><div>Các mã này là các phần bổ túc cho các mã trước đó: cứ nơi nào 0 xuất hiện thì nay thành 1, và ngược lại. Các mã này luôn luôn bắt đầu với một con 1 &nbsp;và kết thúc với 1 con 0. Thêm nữa, chúng có một số chẵn các bit 1, nên sẽ có tính chẵn.</div><div>Nào giờ thì chúng ta đã được trang bị để có thể giải mã UPC. Dùng hai cái bảng vừa rồi, chúng ta có thể xác minh là 12 con sỗ được mã hóa trong lon Cambell's Chicken Noodle Soup 10 3/4-ounce &nbsp;là</div><div style=\"text-align: center;\">0 51000 01251 7</div><div>Thật thất vọng. Như bạn có thể thấy, các số này giống y đúc các số được in ngay ngắn bên dưới UPC. (Điều này rất có ý nghĩa nếu máy quét không thể đọc được mã vì lý do nào đó, thì nhân viên thu ngân có thể nhập số vào bằng tay. Thật sự thì chắc chắn bạn đã &nbsp;gặp cảnh này rồi.) Chúng ta không phải đi qua hết công việc giải mã chúng, and hơn nữa, chúng ta vẫn chưa đến gần với việc giải mã bất cứ thông tin bí mật nào. Thế nhưng cũng chẳng còn gì trong UPC để mà giải mã cả. 30 đường dọc ấy phân ra thành 12 con số.</div><div>Con số đầu tiên (0 trong trường hợp này) được biết đến là <em>ký tự hệ số (number system character)</em>. Một số 0 có thể hiểu đây là một mã UPC thông thường. Nếu UPC xuất hiện trên các món đồ tạp hóa trọng-lượng-bất-kỳ như là thịt hay vật dụng, mã sẽ là 2. Mã giảm giá có mã là 5.</div><div>Năm con số kế tiếp làm thành mã nhà sản xuất. Trong trường hợp này, 51000 là mã cho công ty Campbell Soup. Tất cả các sản phẩm của Campbell có mã này. Năm con số theo sau (01251) là mã cho một sản phẩm cụ thể của công ty, trong trường hợp này, là mã cho một lon súp mì gà 10 3/4-ounce. Mã sản phẩm này có ý nghĩa chỉ khi được kết hợp với mã nhà sản xuất. Một công ty súp mì gà khác có một mã sản phẩm khác và một mã sản phẩm 01251 có thể mang nghĩa gì đó hoàn toàn khác khi đi với nhà sản xuất khác.</div><div>Ngược lại với niềm tin phổ biến, UPC không kèm theo cả giá sản phẩm. Thông tin này có được là từ máy tính cửa hàng sử dụng liên kết với máy quét.</div><div>Con số cuối cùng (7 trong trường hợp này) được gọi là <em>kí tự kiểm tra đồng dư (modulo check character)</em>. &nbsp;Kí tự này cho phép một dạng kiểm lỗi khác. Để xem xét cách nó làm việc, ta hãy gán mỗi 11 số đầu tiên (0 51000 01251 trong ví dụ của chúng ta) cho một chữ cái:</div><div>A BCDEF GHIJK</div><div>Giờ hãy tính vế sau:</div><div>3 x (A + C + E + G + I + K) + (B + D + F + H + J)</div><div>và lấy bội lớn nhất kề nó của 10 trừ đi. Đó được gọi là <em>kí tự kiểm tra đồng dư modulo</em>. Trong trường hợp Súp mì gà Campbell, ta có</div><div>3 x ( 0 + 1 + 0 + 0 + 2 + 1) + (5 + 0 + 0 + 1 + 5) = 3 x 4 + 11 = 23</div><div>Bội lớn nhất của 10 liền kề là 30, vậy nên</div><div>30 - 23 = 7 và đó là kí tự kiểm tra đồng dư modulo được in và mã hóa trong UPC. Đây là một dạng dư. Nếu máy tính điều khiển máy quét không tính ra được kí tự kiểm tra đồng dư giống cái được mã hóa trong UPC, máy tính sẽ không chấp nhận UPC hợp lệ.</div><div>Thông thường, chỉ 4 bit cần để xác định một số thập phân từ 0 tới 9. UPC dùng 7 bit cho 1 số. Tổng quan, UPC dùng 95 bit để mã hóa chỉ 11 con số thập phân hữu dụng. Thật ra UPC bao gồm khoảng trắng (tương đương với 9 bit 0) ở cả bên trái và phải của mẫu hình bảo vệ. Điều đó có nghĩa là hết cả UPC yêu cầu 113 bit để mã hóa 11 số thập phân, hay trên 10 bit cho một số!</div><div>UPC cũng có lợi bởi khả năng cho phép đọc ở cả hai hướng. Nếu các con số đầu tiên mà máy quét giải mã có tính chẵn (có nghĩa là, số lượng các bit 1 trong mỗi mã 7-bit là chẵn), thì máy quét biết rằng nó đang dịch mã UPC từ phải qua. Tiếp theo hệ thống máy tính dùng bảng này để giải mã các con số mặt-bên-phải:</div><div style=\"text-align: center;\"><strong>Bảng phòng trữ cho các mã mặt-bên-phải</strong><br>0100111 = 0 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0111001 = 5<br>0110011 = 1 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0000101 = 6<br>0011011 = 2 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0010001 = 7<br>0100001 = 3 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0001001 = 8<br>0011101 = 4 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0010111 = 9</div><div>và bảng này cho các con số mặt-bên-trái:</div><div style=\"text-align: center;\"><strong>Bảng phòng trữ cho các mã mặt-bên-trái</strong><br>1011000 = 0 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1000110 = 5<br>1001100 = 1 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1111010 = 6<br>1100100 = 2 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1101110 = 7<br>1011110 = 3 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1110110 = 8<br>1100010 = 4 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1101000 = 9</div><div>Các mã 7-bit này khác hoàn toàn với các mã đọc được khi UPC được quét từ trái qua. Không có sự mập mờ nào cả.</div><div>Ta bắt đầu tìm hiểu về code trong sách này với mã Morse, tập hợp của chấm và gạch, và các khoảng dừng giữa chúng. Mã Morse không có vẻ như liền ngay lập tức tương đương với các không và một, nhưng thực tế không phải vậy.</div><div>Nhớ lại các quy luật của mã Morse: Một gạch dài gấp ba lần một chấm. Chấm và gạch của một chữ cái đơn được phân chia bởi một khoảng nghỉ có độ dài của một chấm. Các chữ cái nằm trong một chữ được chia bởi những khoảng nghỉ có độ dài của một gạch. Các chữ được chia bởi khoảng nghỉ bằng với độ dài của hai gạch.</div><div>Nhằm đơn giản phép phân tích này đi một chút, hãy giả sử rằng một gạch dài gấp hai lần một chấm chứ không còn là ba nữa. Có nghĩa là một chấm có thể là một bit 1 và một gạch có thể là hai bit 1. Khoảng nghỉ giờ là các bit 0.</div><div>Dưới đây là bảng cơ bản của mã Morse từ Chương 2:<figure class=\"aligncenter\"><img src=\"https://s3-ap-southeast-1.amazonaws.com/img.spiderum.com/sp-images/f274b5803ac611e7953a3b3083b694e0.png\" class=\"fr-fic fr-dib\"><figcaption class=\"image-description\" contenteditable=\"false\" placeholder=\"Chú thích ảnh (không bắt buộc)\"><br></figcaption></figure></div><div>Còn đây là bản đã được chuyển sang thành các bit:<figure class=\"aligncenter\"><img src=\"https://s3-ap-southeast-1.amazonaws.com/img.spiderum.com/sp-images/1296b8e03ac711e7953a3b3083b694e0.png\" class=\"fr-fic fr-dib\"><figcaption class=\"image-description\" contenteditable=\"false\" placeholder=\"Chú thích ảnh (không bắt buộc)\"><br></figcaption></figure></div><div>Để ý tất cả mọi mã bắt đầu với một bit 1 và kết thúc với một cặp bit 0. Cặp bit 0 đại diện cho khoảng nghỉ giữa các chữ cái trong cùng một chữ. Mã cho dấu cách giữa các chữ là một cặp bit 0 khác. Do đó mã Morse cho \"hi there\" thường được cho như&nbsp;<figure class=\"aligncenter\"><img src=\"https://s3-ap-southeast-1.amazonaws.com/img.spiderum.com/sp-images/b7efabd03ac711e7953a3b3083b694e0.png\" class=\"fr-fic fr-dib\"><figcaption class=\"image-description\" contenteditable=\"false\" placeholder=\"Chú thích ảnh (không bắt buộc)\"><br></figcaption></figure></div><div>nhưng với mã Morse dùng các bit có thể trông như phần cắt ngang của mã UPC:<figure class=\"aligncenter\"><img src=\"https://s3-ap-southeast-1.amazonaws.com/img.spiderum.com/sp-images/dba29e203ac711e7953a3b3083b694e0.png\" class=\"fr-fic fr-dib\"><figcaption class=\"image-description\" contenteditable=\"false\" placeholder=\"Chú thích ảnh (không bắt buộc)\"><br></figcaption></figure></div><div>Nếu theo cách dùng các bit, mã Braille sẽ dễ hơn nhiều so với mã Morse. Braille là một mã 6-bit. Mỗi ký tự được đại diện bởi một mảng sáu chấm, và mỗi chấm trong sáu chấm đó có thể hoặc được dập nổi hoặc không. Như tôi đã giải thích ở Chương 3, chấm thông thường được đánh số từ 1 tới 6:<figure class=\"aligncenter\"><img src=\"https://s3-ap-southeast-1.amazonaws.com/img.spiderum.com/sp-images/5299c9903ac811e7953a3b3083b694e0.png\" class=\"fr-fic fr-dib\"><figcaption class=\"image-description\" contenteditable=\"false\" placeholder=\"Chú thích ảnh (không bắt buộc)\"><br></figcaption></figure></div><div>Từ \"code\" (ví dụ) được đại diện bởi những ký hiệu Braille:<figure class=\"aligncenter\"><img src=\"https://s3-ap-southeast-1.amazonaws.com/img.spiderum.com/sp-images/67c0faa03ac811e7953a3b3083b694e0.png\" class=\"fr-fic fr-dib\"><figcaption class=\"image-description\" contenteditable=\"false\" placeholder=\"Chú thích ảnh (không bắt buộc)\"><br></figcaption></figure></div><div>Nếu chấm nổi là 1 và chấm phẳng là 0, thì mỗi ký tự trong Braille có thể được đại diện bởi một số nhị phân 6-bit. Bốn ký hiệu Braille cho những chữ cái trong chữ &nbsp;\"code\" giờ đơn giản chỉ là:</div><div style=\"text-align: center;\">100100 101010 100110 100010</div><div>với bit đầu tiên bên trái tương ứng với vị trí số 1 trong lưới vuông, và bit ngoài cùng bên phải tương ứng với vị trí số 6.</div><div>Như ta sẽ thấy sau trong cuốn sách, các bit có thể đại diện cho chữ, ảnh, âm thanh, nhạc, và phim cũng như các mã sản phẩm, tốc độ phim, xếp hạng phim, một cuộc xâm lược của quân đội Anh, và tâm ý của người ta yêu dấu. Nhưng cơ bản nhất, bit là số. Toàn bộ những gì cần phải làm khi bit đại diện cho thông tin khác là đếm số các trường hợp có thể có. Điều này giúp xác định được số bit cần thiết để cho mỗi khả năng có thể được gán cho một số.</div><div>Bit cũng đặt một chân vào <em>logic</em>, một mục đích cơ bản cho sự pha trộn kì lạ này giữa triết học và toán học đó là xác minh xem liệu các mệnh đề xác định là đúng hay sai. Đúng và sai cũng có thể là 1 và 0.<br></div>","cat_id":{"_id":12,"name":"Khoa học - Công nghệ"},"creator_id":6140,"created_at":"2017-05-17T06:41:38.539Z","down_point":0,"up_point":10,"tags":[]}