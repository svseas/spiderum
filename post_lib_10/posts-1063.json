{"_id":24099,"tags":[{"_id":"5b9c87fe64599521128928d6","name":"WEB DEVELOPER"},{"_id":"5b17c27ca3ac9c270f3fd68f","name":"JAVASCRIPT"},{"_id":"5d60e5f4d70d6548f2747f16","name":"THIẾT KẾ WEBSITE, XÂY DỰNG WEBSITE"}],"up_point":11,"down_point":0,"title":"Vọc cùng Thành #11 - Realtime API trong 5 phút với FeathersJS","body":"<h2>Lời mở đầu</h2><div>Sau một thời gian sử dụng <strong>Firebase</strong> và gặp phải một số hạn chế nhất định (xin phép không được đề cập) thì mình quyết định ra đi tìm đường cứu dự án.</div><blockquote><div>Nhu cầu tại thời điểm đó của mình trước hết là phải đáp ứng được realtime data, dễ tiếp cận cho dev, khả năng custom cao để dễ phát triển thêm tính năng và đặc biệt nếu có hỗ trợ TypeScript thì đó sẽ là một điểm cộng.</div></blockquote><div>Sau một thời gian tìm hiểu thì mình quyết định ra khơi với con tàu <a href=\"https://feathersjs.com/\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>FeathersJS</strong></a>.</div><div><figure class=\"aligncenter\"><img src=\"https://s3-ap-southeast-1.amazonaws.com/img.spiderum.com/sp-images/0cd3b860dd4311e9b1478d584e4c1c4d.png\" class=\"fr-fic fr-dib img-focus\"><figcaption contenteditable=\"false\" placeholder=\"Chú thích ảnh (không bắt buộc)\" class=\"image-description\"></figcaption></figure></div><h2>FeathersJS có gì hot?</h2><div><figure class=\"aligncenter\"><img src=\"https://docs.feathersjs.com/img/key-image-horizontal.png\" alt=\"Feathers key image\"><figcaption class=\"image-description\" contenteditable=\"false\" placeholder=\"Chú thích ảnh (không bắt buộc)\"><br></figcaption></figure></div><div>Credit: <a href=\"https://docs.feathersjs.com/\" target=\"_blank\">https://docs.feathersjs.com/</a></div><div><strong>FeathersJS</strong> là một framework xây dựng theo hướng service-oriented. Các đặc trưng riêng của <strong>FeathersJS</strong> các bạn có thể đọc thêm <a href=\"https://feathersjs.com/\" rel=\"noopener noreferrer\" target=\"_blank\">tại đây</a>. Dưới đây là một số cảm nhận của mình sau vài tuần vọc về nó:</div><ul><li>Document tốt, giải thích kỹ và có liên kết rất rõ ràng</li><li>Open source nên việc custom lại framework là hoàn toàn có thể (nếu bạn đủ khả năng và thời gian)</li><li>Hỗ trợ thư viện cho cả frontend và backend để giúp việc kết nối dễ dàng hơn (bạn vẫn có thể kết nối bằng tay nếu muốn, có document cho việc này ngay tại trang chủ)</li><li>Hướng tiếp cận vấn đề theo service khá thú vị, vừa giúp dev tập trung giải quyết về business logic vừa hỗ trợ quá trình scale về sau (tách thành microservice chẳng hạn)</li><li>CÓ <strong>TYPESCRIPT</strong></li><li>Có Command-Line Interface (CLI) để generate code (lười gõ như mình RẤT THÍCH điểm này)</li><li>Có nhiều plugins hay và hữu ích. Xem thêm <a href=\"https://github.com/feathersjs/awesome-feathersjs\" rel=\"noopener noreferrer\" target=\"_blank\">tại đây</a></li></ul><div>Mình tuy là dân frontend nhưng khi làm và phát triển ứng dụng với <strong>FeathersJS</strong> thấy khá thoải mái, không phải biết quá nhiều về cách tổ chức code, mô hình/kiến trúc, ... của backend project vì đã được chuẩn hóa khi tạo project (tất nhiên mình vẫn phải nắm cấu trúc của dự án được generate ra nhưng tính ra vẫn dễ hơn việc bắt đầu từ số 0).</div><h2>Một số thứ cần biết về FeathersJS</h2><h3>Services</h3><div><figure class=\"aligncenter\"><img src=\"https://cdn.dribbble.com/users/310943/screenshots/2142081/service-desk-welcome-icons2.png\" alt=\"Service Desk - Welcome Icons chart list email manage users chat message atlassian icon illustration\"><figcaption class=\"image-description\" contenteditable=\"false\" placeholder=\"Chú thích ảnh (không bắt buộc)\"><br></figcaption></figure></div><div>Credit: <a href=\"https://dribbble.com/shots/2142081-Service-Desk-Welcome-Icons\" target=\"_blank\">https://dribbble.com/shots/2142081-Service-Desk-Welcome-Icons</a></div><div>Như mình đã đề cập ở phía trên, FeathersJS xây dựng theo hướng service-oriented. Vậy nên services chính là trái tim của ứng dụng. Đặc điểm của services trong FeathersJS:</div><ul><li>Là một object hoặc instance của một class</li><li>Protocol independent - tức không phụ thuộc vào phương thức bạn gọi service (có thể là REST API, websocket, gọi internal (dưới dạng Service.method())</li><li>Các methods của service bao gồm: find, get, create, update, patch và remove</li><li>Chủ yếu xử lý về truy suất và lưu trữ data xuống database</li></ul><div>Khi tạo service thì bạn cần có ít nhất một trong những method được nêu. Ngoài các method kể trên thì FeathersJS không hỗ trợ method nào khác. Nếu bạn muốn thì bạn cần chuyển nhu cầu phát sinh thành một service mới hoặc một hook cho service hiện tại.</div><div>Lưu ý: Một số bạn có thể thắc mắc điểm khác nhau giữa patch và update. Mình xin giải thích thêm:</div><ul><li>patch: cập nhật data bằng cách merge giữa data cũ và data mới</li><li>update: cập nhật data bằng cách replace data cũ bằng data mới</li></ul><pre># Ví dụ để các bạn dễ hình dung hơn\n\nUser: {\n  id: 69,\n  first_name: 'Thanh',\n  last_name: 'Nguyen',\n  age: 17\n}\n\nUser.patch(69, { age: 18 })\n// => User: { id: 69, first_name: 'Thanh', last_name: 'Nguyen', age: 18 }\n\nUser.update(69, { age: 18})\n// => User: { id: 69, age: 18 }</pre><div>Để gọi một service khác trong service hiện tại thì bạn có thể dùng&nbsp;</div><pre>app.service(otherServiceName).</pre><div>Chi tiết cách override các method của service các bạn tham khảo thêm <a href=\"https://docs.feathersjs.com/guides/basics/services.html#feathers-services\" rel=\"noopener noreferrer\" target=\"_blank\">tại đây.</a></div><h3>Hooks</h3><div><figure class=\"aligncenter\"><img src=\"https://cdn.dribbble.com/users/788099/screenshots/3943904/teamwork_kit8-net.png\" alt=\"Teamwork ui manage task process workflow character work team illustration vector flat kit8\"><figcaption class=\"image-description\" contenteditable=\"false\" placeholder=\"Chú thích ảnh (không bắt buộc)\"><br></figcaption></figure></div><div>Credit: <a href=\"https://dribbble.com/shots/3943904-Teamwork\" target=\"_blank\">https://dribbble.com/shots/3943904-Teamwork</a></div><div>Hook là một phần quan trọng khác trong ứng dụng FeathersJS. Đặc trưng của hook</div><ul><li>Xử lý dữ liệu trước, sau hoặc lỗi khi lưu trữ xuống database (validate dữ liệu, phân quyền user, ghi log hoặc trigger các tác vụ như gửi email, gửi tin nhắn, gửi notification, ...)</li><li>Có 3 loại hooks: before, after và error. Hook có thể được gắn vào bất kì service nào hoặc gắn global vào app (chạy cho mọi service, thường là dạng ghi log)</li></ul><div>Nếu các bạn đã từng làm hoặc tiếp xúc với <a href target=\"_blank\">Express.js</a> thì chắc hẳn các bạn đã nghe qua khái niệm middleware. Hook chính là một middleware cho app hoặc service.</div><div>Nếu các bạn chưa từng nghe về middleware thì các bạn có thể hiểu nó là một bước trong dây chuyền xử lý. Dưới đây là một ví dụ để các bạn dễ hình dung hơn:</div><pre># Service của chúng ta sẽ là nấu cơm\n# Quá trình nấu cơm như sau:\n// đong gạo => vo gạo => nấu => mời cơm/ăn\n\n# Các công việc \"đong gạo\", \"vo gạo\", \"mời cơm/ăn\" sẽ là hook, cụ thể:\n\n- before hooks: đong gạo & vo gạo\n- after hooks: mời cơm/ăn\n- error hooks: xử lý khi cơm bị nhão hoặc bị cháy\n\n# Nếu khai báo theo code thì chúng ta sẽ có dạng như sau:\n\nlet CookRiceService = { ... }\n\nCookRiceService.hooks = {\n  before: [measure(), clean()],\n  after: [inviteOrEat()],\n  error: [hideInTheCornerBecauseOfShame()]\n}</pre><div>Tất cả các hook sẽ chạy theo thứ tự như sau:</div><pre># Normal flow\n\napp.beforeHook -> app.method -> service.beforeHook -> service.method -> service.afterHook -> app.afterHook\n\n# Error flow, skip mọi bước sau bước sinh ra lỗi và chạy\nservice.errorHook -> app.errorHook</pre><div>Để gọi service trong hooks thì bạn có 2 cách:</div><ul><li>Gọi service hiện tại hook đang chạy: context.service</li><li>Gọi service khác: context.app.service(otherServiceName)</li><li>(context) sẽ được truyền vào khi khai báo hook với một service nhất định</li></ul><div>Chi tiết các bạn đọc thêm <a href=\"https://docs.feathersjs.com/guides/basics/hooks.html#hooks\" rel=\"noopener noreferrer\" target=\"_blank\">tại đây</a></div><h3>CLI</h3><div><figure class=\"aligncenter\"><img src=\"https://devnow.vn/wp-content/uploads/2019/09/image.png\" alt><figcaption class=\"image-description\" contenteditable=\"false\" placeholder=\"Chú thích ảnh (không bắt buộc)\"><br></figcaption></figure></div><div>Cú pháp CLI của FeathersJS</div><div>CLI hay còn gọi là command-line interface là công cụ hỗ trợ chúng ta trong quá trình phát triển ứng dụng . FeathersJS CLI chủ yếu hỗ trợ chúng ta generate code để tiết kiệm thời gian gõ hoặc tránh các lỗi typing khi tạo bằng tay (sai tên file, tên biến, nhận thiếu/dư params, ...).</div><div>Phần này chủ yếu hỗ trợ quá trình phát triển, không có gì để nói nên mình đi vào demo luôn nhé!</div><h2>Demo</h2><div><figure class=\"aligncenter\"><img src=\"https://devnow.vn/wp-content/uploads/2019/09/demo-preview-1.png\" alt><figcaption class=\"image-description\" contenteditable=\"false\" placeholder=\"Chú thích ảnh (không bắt buộc)\"><br></figcaption></figure></div><div>Preview demo</div><div><a href=\"https://vct-11.herokuapp.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Demo</a> | <a href=\"https://github.com/EGANY-Team/vct-11-feathersjs\" rel=\"noopener noreferrer\" target=\"_blank\">Github</a></div><div>Do lười không có thời gian nên demo lần này mình làm khá đơn giản, chủ yếu là để các bạn làm quen với FeathersJS. Nếu có dịp thì mình sẽ đi sâu hơn về nó.</div><div>Ứng dụng bao gồm các tính năng:</div><ul><li>Đăng ký</li><li>Đăng nhập</li><li>Danh sách user được cập nhật realtime</li></ul><div>Công nghệ sử dụng bao gồm:</div><ul><li>Backend: FeathersJS (duh)</li><li>Frontend: VueJS qua CDN. Nếu là dự án thật thì các bạn nên chia làm 2 repo để dễ quản lý và phát triển hơn</li></ul><div>Các thành phần liên quan tới FeathersJS:</div><ul><li>Services: authentication(cái này generate sẵn, sử dụng email + password), users(chứa dữ liệu người dùng)</li><li>Hooks: validate-user (kiểm tra email + password), init-user (khởi tạo một số dữ liệu thêm), send-email-verification(gửi email sau khi user đăng ký, cái này để vậy thôi chứ chưa có thời gian implement, chủ yếu là demo after hook)</li></ul><div>Các bước thực hiện:</div><pre># Tạo thư mục project\nmkdir vct-11-feathersjs\n\n# Generate khung project bằng CLI\nfeathers generate app\n\n# Tạo hook bằng CLI\nfeathers generate hook</pre><div><br></div><h2>Đánh giá</h2><div>Hiện tại mình đang sử dụng FeathersJS (cùng TypeScript) để phát triển một số ứng dụng trong công ty. Tuy có gặp một số khó khăn trong lúc phát triển nhưng nhìn chung so với việc sử dụng Firebase (Spark Plan) thì mình thấy FeathersJS ổn hơn và \"tự do\" hơn rất nhiều (đặc biệt là việc query dữ liệu và các hooks khi xử lý data). Và nếu thích thì các bạn vẫn có thể sử dụng Firebase ngay trong FeathersJS mà không gặp phải một vấn đề nào cả.</div><div>Dưới đây là một số đánh giá chung của mình:</div><h3>Ưu điểm:</h3><ul><li>Service-oriented</li><li>Hỗ trợ TypeScript</li><li>CLI, documents, libraries, plugins hỗ trợ hữu ích. Cho phép customize nhiều thứ mặc dù là một framework</li><li>Dễ dùng, dễ tiếp cận</li></ul><h3>Nhược điểm:</h3><ul><li>Còn khá mới</li><li>Document còn một số chỗ thiếu sót (do mới upgrade từ v3 lên v4)</li><li>Cần cân nhắc khi xử lý vấn đề, khi nào nên tạo services và khi nào nên tạo hooks</li><li>Typing cho TypeScript chưa tốt nên sẽ phát sinh một vài vấn đề trong lúc customize service</li><li>Vẫn là monolithic application tuy nhiên có thể phát triển theo hướng microservice với các plugins hỗ trợ</li></ul><div>Hi vọng các bạn sẽ có cái nhìn rõ hơn về FeathersJS và có thể áp dụng nó vào những project trong tương lai. Nếu có bất kì thắc mắc, góp ý nào thì cứ comment phía dưới.</div><div>Chúc các bạn thành công. Happy hacking!</div><div style=\"text-align:right;\">Thành Nguyễn @ EGANY&nbsp;</div>","cat_id":{"_id":12,"name":"Khoa học - Công nghệ"},"creator_id":38785,"created_at":"2019-09-22T14:12:09.338Z"}