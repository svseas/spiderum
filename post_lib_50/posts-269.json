{"_id":17287,"tags":[],"up_point":56,"down_point":0,"title":"Chữa bệnh lười tắt đèn ngủ bằng MQTT, Raspberry Pi và ESP32","body":"<div><span class=\"fr-video fr-fvc fr-dvb fr-draggable\" contenteditable=\"false\" draggable=\"true\"><iframe src=\"//www.youtube.com/embed/qrbcxvICLS8?wmode=opaque\" allowfullscreen=\"\" width=\"640\" height=\"360\" frameborder=\"0\"></iframe></span></div><div>Tôi thường để đèn đi ngủ vì lúc ngủ rất lười tắt đèn. Vì thế có nhiều đêm ngủ không ngon vì đèn sáng quá. Lựa chọn là vùng dậy khỏi chăn để tắt đèn hoặc là chùm kín mít mặt để không bị sáng nữa. Vì thế với tôi một trong những điều làm tôi rất ngứa ngáy khó chịu là tại sao cái đèn mà mình cũng không nằm trong chăn tắt được.&nbsp;</div><div>Dù rằng ta thích hoa hồng, nhưng kẻ thù lại buộc ta ôm keyboard.</div><div>Nhân dịp có bão Cách mạng 4.0 tôi làm một cái dự án Cách mạng 0.4 với nhà mình. Chiếc đèn này, báo cáo, là đã được nối mạng. Bây giờ chỉ cần hỏi nhẹ nhàng bạn Siri là bạn ấy sẵn sàng bật tắt đèn ở đâu trong nhà cũng được.</div><div>Vì tôi cũng muốn dùng một công nghệ mở, không phụ thuộc qúa nhiều vào Apple nên tôi dựa tất cả trên nền tảng MQTT (đọc là <em>mosquitto</em> - con muỗi). Đây là nền tảng mở cho các hệ thống IoT và rất gọn nhẹ và được hỗ trợ rộng rãi trên hầu như tất cả các nền tảng nhúng.</div><div>Một sơ đồ đơn giản của hệ thống này như sau:</div><div><figure class=\"aligncenter\"><img src=\"https://s3-ap-southeast-1.amazonaws.com/img.spiderum.com/sp-images/0895d8a0f11711e8998039ad750f8d9e.jpg\" class=\"fr-fic fr-dib\"><figcaption class=\"image-description\" contenteditable=\"false\" placeholder=\"Chú thích ảnh (không bắt buộc)\">Xin lỗi vì vẽ nguệch ngoạc</figcaption></figure></div><div>Tôi có một chiếc Raspberry Pi 0 Wireless có tên là <a href=\"http://disney.wikia.com/wiki/Grand_Pabbie\" rel=\"noopener noreferrer\" target=\"_blank\">Pabbie</a> làm một số việc trong căn nhà. Trên chiếc Raspberry Pi này tôi có cài <a href=\"https://github.com/nfarina/homebridge\" rel=\"noopener noreferrer\" target=\"_blank\">Homebridge</a> là chương trình chạy trên Node JS, nó đóng vai trò là người dẫn đường, và nói chuyện với điện thoại theo giao thức HomeKit của Apple. Có một trình cắm vào (plug-in) rất tốt cho Homebridge là <a href=\"https://www.npmjs.com/package/homebridge-mqttthing\" rel=\"noopener noreferrer\" target=\"_blank\">homebridge-mqttthing</a>. Cấu hình homebridge tương đối đơn giản, chỉ phải khai có một <a href=\"https://www.npmjs.com/package/homebridge-mqttthing#light-bulb\" rel=\"noopener noreferrer\" target=\"_blank\">bóng đèn theo giao thức mqttthing</a> là được.</div><div>Tất cả các thiết bị dùng <a href=\"http://www.steves-internet-guide.com/into-mqtt-python-client/\" rel=\"noopener noreferrer\" target=\"_blank\">giao thức MQTT</a> chỉ có thể làm hai việc, một là \"nghe\" hai là \"nói\". Bất cứ thiết bị nào cũng có thể \"nghe\" và \"nói\" vào bao nhiêu chủ đề tùy thích.&nbsp;</div><div>Ví dụ, để bật bóng đèn, bạn cần có một thiết bị bật chiếc bóng đèn thật (ở thiết lập này là chiếc bo mạch ESP32) \"nghe\" chủ đề \"/phòngngủ/côngtắcđèn.\" Khi ai đó \"nói\" vào chủ đề này từ \"bật\", thì chiếc bo mạch đang nghe sẽ nhận ngay được lệnh này từ server trung gian (gọi là \"Broker\"). Vấn đề còn lại là ngắt hay cấp điện cho một chân của chiếc ESP32 này để bật đèn.</div><div>Điều hay của MQTT là tất cả dựa vào server trung gian (Broker) nên bạn không phải lo firewall mở cổng gì cả. Một khi broker hoạt động trên \"đám mây\" ví dụ <a href=\"https://iot.eclipse.org/getting-started/\" rel=\"noopener noreferrer\" target=\"_blank\">broker miễn phí của Eclipse Foundation</a> mở cổng rồi thì bạn muốn bao nhiêu thiết bị sau bao nhiêu tường lửa kết nối theo giao thức nào đều được (hai giao thức thịnh hành là mqtt và websocket). MQTT có cái lợi là ai nghe cũng được, ai nói cũng được, ở đâu không quan trọng miễn là nói được với broker. Vì thế mà nếu tôi có thiết bị IoT mà tôi không tin tưởng (ví dụ, chương trình chạy trên ESP32 của tôi viết trong 15 phút được chắc bị buffer overflow tùm lum) thì tôi có thể đặt nó trên một subnet biệt lập.</div><div>Đại khái để xử lý một tình huống bật đèn chúng ta cần đoạn mã như thế này:</div><pre>static esp_err_t mqtt_event_handler(esp_mqtt_event_handle_t event)\n{\n    esp_mqtt_client_handle_t client = event->client;\n    int msg_id;\n\n    switch (event->event_id) {\n        // ...\n        case MQTT_EVENT_DATA:\n            ESP_LOGI(TAG, \"MQTT_EVENT_DATA\");\n\n            int desired_state = 0;\n\n            if (strncmp(event->topic, \"horseradix/bedroom/light/setOn\", event->topic_len) == 0) {\n                if (strncmp(event->data, \"1\", 1) == 0) {\n                    desired_state = 1;\n                }\n                gpio_set_level(BLINK_GPIO, desired_state);\n            }\n            break;\n    }\n}</pre><div>MQTT theo tôi là một giao thức rất có triển vọng và rất tuyệt vời, giải quyết được rất nhiều nhức đầu của các thiết bị IoT.</div><div>Việc còn lại là ESP32 kết nối vào broker và thực hiện lệnh. Tôi vô cùng ấn tượng với con chip ESP32. ESP32 có <a href=\"https://docs.espressif.com/projects/esp-idf/en/stable/get-started/index.html\" rel=\"noopener noreferrer\" target=\"_blank\">hướng dẫn rất tuyệt vời và ví dụ rất rõ ràng để người mới bắt đầu làm</a>. Tôi không thể tưởng tượng công việc lại đơn giản như vậy, chỉ 1h là tôi theo xong được <em>tutorial</em> và bắt tay lập trình được yêu cầu của mình. Người viết thư viện MQTT cho ESP32 là anh Tuấn (<a href=\"https://github.com/tuanpmt\" rel=\"noopener noreferrer\" target=\"_blank\">tuanpmt</a>), một lập trình viên người Việt có lẽ là đang làm việc cho espressif, và thư viện này chạy rất tốt. Tôi xin ngả mũ bái phục.</div><div>Cả hệ thống này an toàn, đơn giản, dễ mở rộng, và có thể sử dụng với các hệ sinh thái khác như của Amazon và Google. Tuy nhiên tôi tương đối hài lòng với thiết lập đơn giản hiện tại của mình.</div><div>Và tôi cũng sẽ ngủ ngon hơn mà vẫn được lười. Kế hoạch 5 ngày lần thứ nhất coi như là thành công.</div>","cat_id":{"_id":12,"name":"Khoa học - Công nghệ"},"creator_id":23056,"created_at":"2018-11-26T01:44:09.335Z"}